{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.SHOULD_SKIP = exports.SHOULD_STOP = exports.REMOVED = void 0;\n\nvar virtualTypes = require(\"./lib/virtual-types\");\n\nvar _debug = require(\"debug\");\n\nvar _index = require(\"../index\");\n\nvar _scope = require(\"../scope\");\n\nvar t = require(\"@babel/types\");\n\nvar _cache = require(\"../cache\");\n\nvar _generator = require(\"@babel/generator\");\n\nvar NodePath_ancestry = require(\"./ancestry\");\n\nvar NodePath_inference = require(\"./inference\");\n\nvar NodePath_replacement = require(\"./replacement\");\n\nvar NodePath_evaluation = require(\"./evaluation\");\n\nvar NodePath_conversion = require(\"./conversion\");\n\nvar NodePath_introspection = require(\"./introspection\");\n\nvar NodePath_context = require(\"./context\");\n\nvar NodePath_removal = require(\"./removal\");\n\nvar NodePath_modification = require(\"./modification\");\n\nvar NodePath_family = require(\"./family\");\n\nvar NodePath_comments = require(\"./comments\");\n\nvar _debug2 = _debug(\"babel\");\n\nvar REMOVED = 1 << 0;\nexports.REMOVED = REMOVED;\nvar SHOULD_STOP = 1 << 1;\nexports.SHOULD_STOP = SHOULD_STOP;\nvar SHOULD_SKIP = 1 << 2;\nexports.SHOULD_SKIP = SHOULD_SKIP;\n\nvar NodePath = /*#__PURE__*/function () {\n  function NodePath(hub, parent) {\n    _classCallCheck(this, NodePath);\n\n    this.contexts = [];\n    this.state = null;\n    this.opts = null;\n    this._traverseFlags = 0;\n    this.skipKeys = null;\n    this.parentPath = null;\n    this.container = null;\n    this.listKey = null;\n    this.key = null;\n    this.node = null;\n    this.type = null;\n    this.parent = parent;\n    this.hub = hub;\n    this.data = null;\n    this.context = null;\n    this.scope = null;\n  }\n\n  _createClass(NodePath, [{\n    key: \"getScope\",\n    value: function getScope(scope) {\n      return this.isScope() ? new _scope.default(this) : scope;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(key, val) {\n      if (this.data == null) {\n        this.data = Object.create(null);\n      }\n\n      return this.data[key] = val;\n    }\n  }, {\n    key: \"getData\",\n    value: function getData(key, def) {\n      if (this.data == null) {\n        this.data = Object.create(null);\n      }\n\n      var val = this.data[key];\n      if (val === undefined && def !== undefined) val = this.data[key] = def;\n      return val;\n    }\n  }, {\n    key: \"buildCodeFrameError\",\n    value: function buildCodeFrameError(msg) {\n      var Error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SyntaxError;\n      return this.hub.buildError(this.node, msg, Error);\n    }\n  }, {\n    key: \"traverse\",\n    value: function traverse(visitor, state) {\n      (0, _index.default)(this.node, visitor, this.scope, state, this);\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, node) {\n      t.validate(this.node, key, node);\n      this.node[key] = node;\n    }\n  }, {\n    key: \"getPathLocation\",\n    value: function getPathLocation() {\n      var parts = [];\n      var path = this;\n\n      do {\n        var key = path.key;\n        if (path.inList) key = \"\".concat(path.listKey, \"[\").concat(key, \"]\");\n        parts.unshift(key);\n      } while (path = path.parentPath);\n\n      return parts.join(\".\");\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(message) {\n      if (!_debug2.enabled) return;\n\n      _debug2(\"\".concat(this.getPathLocation(), \" \").concat(this.type, \": \").concat(message));\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return (0, _generator.default)(this.node).code;\n    }\n  }, {\n    key: \"inList\",\n    get: function get() {\n      return !!this.listKey;\n    },\n    set: function set(inList) {\n      if (!inList) {\n        this.listKey = null;\n      }\n    }\n  }, {\n    key: \"parentKey\",\n    get: function get() {\n      return this.listKey || this.key;\n    }\n  }, {\n    key: \"shouldSkip\",\n    get: function get() {\n      return !!(this._traverseFlags & SHOULD_SKIP);\n    },\n    set: function set(v) {\n      if (v) {\n        this._traverseFlags |= SHOULD_SKIP;\n      } else {\n        this._traverseFlags &= ~SHOULD_SKIP;\n      }\n    }\n  }, {\n    key: \"shouldStop\",\n    get: function get() {\n      return !!(this._traverseFlags & SHOULD_STOP);\n    },\n    set: function set(v) {\n      if (v) {\n        this._traverseFlags |= SHOULD_STOP;\n      } else {\n        this._traverseFlags &= ~SHOULD_STOP;\n      }\n    }\n  }, {\n    key: \"removed\",\n    get: function get() {\n      return !!(this._traverseFlags & REMOVED);\n    },\n    set: function set(v) {\n      if (v) {\n        this._traverseFlags |= REMOVED;\n      } else {\n        this._traverseFlags &= ~REMOVED;\n      }\n    }\n  }], [{\n    key: \"get\",\n    value: function get(_ref) {\n      var hub = _ref.hub,\n          parentPath = _ref.parentPath,\n          parent = _ref.parent,\n          container = _ref.container,\n          listKey = _ref.listKey,\n          key = _ref.key;\n\n      if (!hub && parentPath) {\n        hub = parentPath.hub;\n      }\n\n      if (!parent) {\n        throw new Error(\"To get a node path the parent needs to exist\");\n      }\n\n      var targetNode = container[key];\n\n      var paths = _cache.path.get(parent);\n\n      if (!paths) {\n        paths = new Map();\n\n        _cache.path.set(parent, paths);\n      }\n\n      var path = paths.get(targetNode);\n\n      if (!path) {\n        path = new NodePath(hub, parent);\n        if (targetNode) paths.set(targetNode, path);\n      }\n\n      path.setup(parentPath, container, listKey, key);\n      return path;\n    }\n  }]);\n\n  return NodePath;\n}();\n\nObject.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments);\n\nvar _iterator = _createForOfIteratorHelper(t.TYPES),\n    _step;\n\ntry {\n  var _loop2 = function _loop2() {\n    var type = _step.value;\n    var typeKey = \"is\".concat(type);\n    var fn = t[typeKey];\n\n    NodePath.prototype[typeKey] = function (opts) {\n      return fn(this.node, opts);\n    };\n\n    NodePath.prototype[\"assert\".concat(type)] = function (opts) {\n      if (!fn(this.node, opts)) {\n        throw new TypeError(\"Expected node path of type \".concat(type));\n      }\n    };\n  };\n\n  for (_iterator.s(); !(_step = _iterator.n()).done;) {\n    _loop2();\n  }\n} catch (err) {\n  _iterator.e(err);\n} finally {\n  _iterator.f();\n}\n\nvar _loop = function _loop() {\n  var type = _Object$keys[_i];\n  if (type[0] === \"_\") return \"continue\";\n  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);\n  var virtualType = virtualTypes[type];\n\n  NodePath.prototype[\"is\".concat(type)] = function (opts) {\n    return virtualType.checkPath(this, opts);\n  };\n};\n\nfor (var _i = 0, _Object$keys = Object.keys(virtualTypes); _i < _Object$keys.length; _i++) {\n  var _ret = _loop();\n\n  if (_ret === \"continue\") continue;\n}\n\nvar _default = NodePath;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}