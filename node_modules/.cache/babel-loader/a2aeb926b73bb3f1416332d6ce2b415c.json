{"ast":null,"code":"\"use strict\";\n\nvar _require$builders = require(\"../doc\").builders,\n    concat = _require$builders.concat,\n    hardline = _require$builders.hardline,\n    indent = _require$builders.indent,\n    join = _require$builders.join;\n\nvar preprocess = require(\"./preprocess\");\n\nfunction genericPrint(path, options, print) {\n  var node = path.getValue();\n\n  switch (node.type) {\n    case \"JsonRoot\":\n      return concat([path.call(print, \"node\"), hardline]);\n\n    case \"ArrayExpression\":\n      return node.elements.length === 0 ? \"[]\" : concat([\"[\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"elements\"))])), hardline, \"]\"]);\n\n    case \"ObjectExpression\":\n      return node.properties.length === 0 ? \"{}\" : concat([\"{\", indent(concat([hardline, join(concat([\",\", hardline]), path.map(print, \"properties\"))])), hardline, \"}\"]);\n\n    case \"ObjectProperty\":\n      return concat([path.call(print, \"key\"), \": \", path.call(print, \"value\")]);\n\n    case \"UnaryExpression\":\n      return concat([node.operator === \"+\" ? \"\" : node.operator, path.call(print, \"argument\")]);\n\n    case \"NullLiteral\":\n      return \"null\";\n\n    case \"BooleanLiteral\":\n      return node.value ? \"true\" : \"false\";\n\n    case \"StringLiteral\":\n    case \"NumericLiteral\":\n      return JSON.stringify(node.value);\n\n    case \"Identifier\":\n      return JSON.stringify(node.name);\n\n    default:\n      /* istanbul ignore next */\n      throw new Error(\"unknown type: \" + JSON.stringify(node.type));\n  }\n}\n\nfunction clean(node, newNode\n/*, parent*/\n) {\n  delete newNode.start;\n  delete newNode.end;\n  delete newNode.extra;\n  delete newNode.loc;\n  delete newNode.comments;\n\n  if (node.type === \"Identifier\") {\n    return {\n      type: \"StringLiteral\",\n      value: node.name\n    };\n  }\n\n  if (node.type === \"UnaryExpression\" && node.operator === \"+\") {\n    return newNode.argument;\n  }\n}\n\nmodule.exports = {\n  preprocess: preprocess,\n  print: genericPrint,\n  massageAstNode: clean\n};","map":null,"metadata":{},"sourceType":"script"}