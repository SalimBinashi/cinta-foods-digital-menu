{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadPrivatePartialConfig);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadPrivatePartialConfig;\nexports.loadPartialConfig = void 0;\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _gensync() {\n  var data = require(\"gensync\");\n\n  _gensync = function _gensync() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = require(\"./plugin\");\n\nvar _util = require(\"./util\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nvar _environment = require(\"./helpers/environment\");\n\nvar _options = require(\"./validation/options\");\n\nvar _files = require(\"./files\");\n\nvar _resolveTargets = require(\"./resolve-targets\");\n\nvar _excluded = [\"showIgnoredFiles\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction resolveRootMode(rootDir, rootMode) {\n  switch (rootMode) {\n    case \"root\":\n      return rootDir;\n\n    case \"upward-optional\":\n      {\n        var upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n        return upwardRootDir === null ? rootDir : upwardRootDir;\n      }\n\n    case \"upward\":\n      {\n        var _upwardRootDir = (0, _files.findConfigUpwards)(rootDir);\n\n        if (_upwardRootDir !== null) return _upwardRootDir;\n        throw Object.assign(new Error(\"Babel was run with rootMode:\\\"upward\\\" but a root could not \" + \"be found when searching upward from \\\"\".concat(rootDir, \"\\\".\\n\") + \"One of the following config files must be in the directory tree: \" + \"\\\"\".concat(_files.ROOT_CONFIG_FILENAMES.join(\", \"), \"\\\".\")), {\n          code: \"BABEL_ROOT_NOT_FOUND\",\n          dirname: rootDir\n        });\n      }\n\n    default:\n      throw new Error(\"Assertion failure - unknown rootMode value.\");\n  }\n}\n\nfunction loadPrivatePartialConfig(inputOpts) {\n  var args, _args$envName, envName, _args$cwd, cwd, _args$root, rootDir, _args$rootMode, rootMode, caller, _args$cloneInputAst, cloneInputAst, absoluteCwd, absoluteRootDir, filename, showConfigPath, context, configChain, merged, options;\n\n  return _regeneratorRuntime.wrap(function loadPrivatePartialConfig$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(inputOpts != null && (typeof inputOpts !== \"object\" || Array.isArray(inputOpts)))) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new Error(\"Babel options must be an object, null, or undefined\");\n\n        case 2:\n          args = inputOpts ? (0, _options.validate)(\"arguments\", inputOpts) : {};\n          _args$envName = args.envName, envName = _args$envName === void 0 ? (0, _environment.getEnv)() : _args$envName, _args$cwd = args.cwd, cwd = _args$cwd === void 0 ? \".\" : _args$cwd, _args$root = args.root, rootDir = _args$root === void 0 ? \".\" : _args$root, _args$rootMode = args.rootMode, rootMode = _args$rootMode === void 0 ? \"root\" : _args$rootMode, caller = args.caller, _args$cloneInputAst = args.cloneInputAst, cloneInputAst = _args$cloneInputAst === void 0 ? true : _args$cloneInputAst;\n          absoluteCwd = _path().resolve(cwd);\n          absoluteRootDir = resolveRootMode(_path().resolve(absoluteCwd, rootDir), rootMode);\n          filename = typeof args.filename === \"string\" ? _path().resolve(cwd, args.filename) : undefined;\n          return _context.delegateYield((0, _files.resolveShowConfigPath)(absoluteCwd), \"t0\", 8);\n\n        case 8:\n          showConfigPath = _context.t0;\n          context = {\n            filename: filename,\n            cwd: absoluteCwd,\n            root: absoluteRootDir,\n            envName: envName,\n            caller: caller,\n            showConfig: showConfigPath === filename\n          };\n          return _context.delegateYield((0, _configChain.buildRootChain)(args, context), \"t1\", 11);\n\n        case 11:\n          configChain = _context.t1;\n\n          if (configChain) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.abrupt(\"return\", null);\n\n        case 14:\n          merged = {\n            assumptions: {}\n          };\n          configChain.options.forEach(function (opts) {\n            (0, _util.mergeOptions)(merged, opts);\n          });\n          options = Object.assign({}, merged, {\n            targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir),\n            cloneInputAst: cloneInputAst,\n            babelrc: false,\n            configFile: false,\n            browserslistConfigFile: false,\n            passPerPreset: false,\n            envName: context.envName,\n            cwd: context.cwd,\n            root: context.root,\n            rootMode: \"root\",\n            filename: typeof context.filename === \"string\" ? context.filename : undefined,\n            plugins: configChain.plugins.map(function (descriptor) {\n              return (0, _item.createItemFromDescriptor)(descriptor);\n            }),\n            presets: configChain.presets.map(function (descriptor) {\n              return (0, _item.createItemFromDescriptor)(descriptor);\n            })\n          });\n          return _context.abrupt(\"return\", {\n            options: options,\n            context: context,\n            fileHandling: configChain.fileHandling,\n            ignore: configChain.ignore,\n            babelrc: configChain.babelrc,\n            config: configChain.config,\n            files: configChain.files\n          });\n\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar loadPartialConfig = _gensync()( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(opts) {\n  var showIgnoredFiles, _opts, result, options, babelrc, ignore, config, fileHandling, files;\n\n  return _regeneratorRuntime.wrap(function _callee$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          showIgnoredFiles = false;\n\n          if (typeof opts === \"object\" && opts !== null && !Array.isArray(opts)) {\n            _opts = opts;\n            showIgnoredFiles = _opts.showIgnoredFiles;\n            opts = _objectWithoutPropertiesLoose(_opts, _excluded);\n            _opts;\n          }\n\n          return _context2.delegateYield(loadPrivatePartialConfig(opts), \"t0\", 3);\n\n        case 3:\n          result = _context2.t0;\n\n          if (result) {\n            _context2.next = 6;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 6:\n          options = result.options, babelrc = result.babelrc, ignore = result.ignore, config = result.config, fileHandling = result.fileHandling, files = result.files;\n\n          if (!(fileHandling === \"ignored\" && !showIgnoredFiles)) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", null);\n\n        case 9:\n          (options.plugins || []).forEach(function (item) {\n            if (item.value instanceof _plugin.default) {\n              throw new Error(\"Passing cached plugin instances is not supported in \" + \"babel.loadPartialConfig()\");\n            }\n          });\n          return _context2.abrupt(\"return\", new PartialConfig(options, babelrc ? babelrc.filepath : undefined, ignore ? ignore.filepath : undefined, config ? config.filepath : undefined, fileHandling, files));\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _callee);\n}));\n\nexports.loadPartialConfig = loadPartialConfig;\n\nvar PartialConfig = /*#__PURE__*/function () {\n  function PartialConfig(options, babelrc, ignore, config, fileHandling, files) {\n    _classCallCheck(this, PartialConfig);\n\n    this.options = void 0;\n    this.babelrc = void 0;\n    this.babelignore = void 0;\n    this.config = void 0;\n    this.fileHandling = void 0;\n    this.files = void 0;\n    this.options = options;\n    this.babelignore = ignore;\n    this.babelrc = babelrc;\n    this.config = config;\n    this.fileHandling = fileHandling;\n    this.files = files;\n    Object.freeze(this);\n  }\n\n  _createClass(PartialConfig, [{\n    key: \"hasFilesystemConfig\",\n    value: function hasFilesystemConfig() {\n      return this.babelrc !== undefined || this.config !== undefined;\n    }\n  }]);\n\n  return PartialConfig;\n}();\n\nObject.freeze(PartialConfig.prototype);","map":null,"metadata":{},"sourceType":"script"}