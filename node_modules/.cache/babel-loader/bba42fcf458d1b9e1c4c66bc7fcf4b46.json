{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar stringWidth = require(\"string-width\");\n\nvar escapeStringRegexp = require(\"escape-string-regexp\");\n\nvar getLast = require(\"../utils/get-last\"); // eslint-disable-next-line no-control-regex\n\n\nvar notAsciiRegex = /[^\\x20-\\x7F]/;\n\nfunction isExportDeclaration(node) {\n  if (node) {\n    switch (node.type) {\n      case \"ExportDefaultDeclaration\":\n      case \"ExportDefaultSpecifier\":\n      case \"DeclareExportDeclaration\":\n      case \"ExportNamedDeclaration\":\n      case \"ExportAllDeclaration\":\n        return true;\n    }\n  }\n\n  return false;\n}\n\nfunction getParentExportDeclaration(path) {\n  var parentNode = path.getParentNode();\n\n  if (path.getName() === \"declaration\" && isExportDeclaration(parentNode)) {\n    return parentNode;\n  }\n\n  return null;\n}\n\nfunction getPenultimate(arr) {\n  if (arr.length > 1) {\n    return arr[arr.length - 2];\n  }\n\n  return null;\n}\n\nfunction skip(chars) {\n  return function (text, index, opts) {\n    var backwards = opts && opts.backwards; // Allow `skip` functions to be threaded together without having\n    // to check for failures (did someone say monads?).\n\n    if (index === false) {\n      return false;\n    }\n\n    var length = text.length;\n    var cursor = index;\n\n    while (cursor >= 0 && cursor < length) {\n      var c = text.charAt(cursor);\n\n      if (chars instanceof RegExp) {\n        if (!chars.test(c)) {\n          return cursor;\n        }\n      } else if (chars.indexOf(c) === -1) {\n        return cursor;\n      }\n\n      backwards ? cursor-- : cursor++;\n    }\n\n    if (cursor === -1 || cursor === length) {\n      // If we reached the beginning or end of the file, return the\n      // out-of-bounds cursor. It's up to the caller to handle this\n      // correctly. We don't want to indicate `false` though if it\n      // actually skipped valid characters.\n      return cursor;\n    }\n\n    return false;\n  };\n}\n\nvar skipWhitespace = skip(/\\s/);\nvar skipSpaces = skip(\" \\t\");\nvar skipToLineEnd = skip(\",; \\t\");\nvar skipEverythingButNewLine = skip(/[^\\r\\n]/);\n\nfunction skipInlineComment(text, index) {\n  if (index === false) {\n    return false;\n  }\n\n  if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"*\") {\n    for (var i = index + 2; i < text.length; ++i) {\n      if (text.charAt(i) === \"*\" && text.charAt(i + 1) === \"/\") {\n        return i + 2;\n      }\n    }\n  }\n\n  return index;\n}\n\nfunction skipTrailingComment(text, index) {\n  if (index === false) {\n    return false;\n  }\n\n  if (text.charAt(index) === \"/\" && text.charAt(index + 1) === \"/\") {\n    return skipEverythingButNewLine(text, index);\n  }\n\n  return index;\n} // This one doesn't use the above helper function because it wants to\n// test \\r\\n in order and `skip` doesn't support ordering and we only\n// want to skip one newline. It's simple to implement.\n\n\nfunction skipNewline(text, index, opts) {\n  var backwards = opts && opts.backwards;\n\n  if (index === false) {\n    return false;\n  }\n\n  var atIndex = text.charAt(index);\n\n  if (backwards) {\n    if (text.charAt(index - 1) === \"\\r\" && atIndex === \"\\n\") {\n      return index - 2;\n    }\n\n    if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\n      return index - 1;\n    }\n  } else {\n    if (atIndex === \"\\r\" && text.charAt(index + 1) === \"\\n\") {\n      return index + 2;\n    }\n\n    if (atIndex === \"\\n\" || atIndex === \"\\r\" || atIndex === \"\\u2028\" || atIndex === \"\\u2029\") {\n      return index + 1;\n    }\n  }\n\n  return index;\n}\n\nfunction hasNewline(text, index, opts) {\n  opts = opts || {};\n  var idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\n  var idx2 = skipNewline(text, idx, opts);\n  return idx !== idx2;\n}\n\nfunction hasNewlineInRange(text, start, end) {\n  for (var i = start; i < end; ++i) {\n    if (text.charAt(i) === \"\\n\") {\n      return true;\n    }\n  }\n\n  return false;\n} // Note: this function doesn't ignore leading comments unlike isNextLineEmpty\n\n\nfunction isPreviousLineEmpty(text, node, locStart) {\n  var idx = locStart(node) - 1;\n  idx = skipSpaces(text, idx, {\n    backwards: true\n  });\n  idx = skipNewline(text, idx, {\n    backwards: true\n  });\n  idx = skipSpaces(text, idx, {\n    backwards: true\n  });\n  var idx2 = skipNewline(text, idx, {\n    backwards: true\n  });\n  return idx !== idx2;\n}\n\nfunction isNextLineEmptyAfterIndex(text, index) {\n  var oldIdx = null;\n  var idx = index;\n\n  while (idx !== oldIdx) {\n    // We need to skip all the potential trailing inline comments\n    oldIdx = idx;\n    idx = skipToLineEnd(text, idx);\n    idx = skipInlineComment(text, idx);\n    idx = skipSpaces(text, idx);\n  }\n\n  idx = skipTrailingComment(text, idx);\n  idx = skipNewline(text, idx);\n  return hasNewline(text, idx);\n}\n\nfunction isNextLineEmpty(text, node, locEnd) {\n  return isNextLineEmptyAfterIndex(text, locEnd(node));\n}\n\nfunction getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, idx) {\n  var oldIdx = null;\n\n  while (idx !== oldIdx) {\n    oldIdx = idx;\n    idx = skipSpaces(text, idx);\n    idx = skipInlineComment(text, idx);\n    idx = skipTrailingComment(text, idx);\n    idx = skipNewline(text, idx);\n  }\n\n  return idx;\n}\n\nfunction getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd) {\n  return getNextNonSpaceNonCommentCharacterIndexWithStartIndex(text, locEnd(node));\n}\n\nfunction getNextNonSpaceNonCommentCharacter(text, node, locEnd) {\n  return text.charAt(getNextNonSpaceNonCommentCharacterIndex(text, node, locEnd));\n}\n\nfunction hasSpaces(text, index, opts) {\n  opts = opts || {};\n  var idx = skipSpaces(text, opts.backwards ? index - 1 : index, opts);\n  return idx !== index;\n}\n\nfunction setLocStart(node, index) {\n  if (node.range) {\n    node.range[0] = index;\n  } else {\n    node.start = index;\n  }\n}\n\nfunction setLocEnd(node, index) {\n  if (node.range) {\n    node.range[1] = index;\n  } else {\n    node.end = index;\n  }\n}\n\nvar PRECEDENCE = {};\n[[\"|>\"], [\"??\"], [\"||\"], [\"&&\"], [\"|\"], [\"^\"], [\"&\"], [\"==\", \"===\", \"!=\", \"!==\"], [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"], [\">>\", \"<<\", \">>>\"], [\"+\", \"-\"], [\"*\", \"/\", \"%\"], [\"**\"]].forEach(function (tier, i) {\n  tier.forEach(function (op) {\n    PRECEDENCE[op] = i;\n  });\n});\n\nfunction getPrecedence(op) {\n  return PRECEDENCE[op];\n}\n\nvar equalityOperators = {\n  \"==\": true,\n  \"!=\": true,\n  \"===\": true,\n  \"!==\": true\n};\nvar multiplicativeOperators = {\n  \"*\": true,\n  \"/\": true,\n  \"%\": true\n};\nvar bitshiftOperators = {\n  \">>\": true,\n  \">>>\": true,\n  \"<<\": true\n};\n\nfunction shouldFlatten(parentOp, nodeOp) {\n  if (getPrecedence(nodeOp) !== getPrecedence(parentOp)) {\n    return false;\n  } // ** is right-associative\n  // x ** y ** z --> x ** (y ** z)\n\n\n  if (parentOp === \"**\") {\n    return false;\n  } // x == y == z --> (x == y) == z\n\n\n  if (equalityOperators[parentOp] && equalityOperators[nodeOp]) {\n    return false;\n  } // x * y % z --> (x * y) % z\n\n\n  if (nodeOp === \"%\" && multiplicativeOperators[parentOp] || parentOp === \"%\" && multiplicativeOperators[nodeOp]) {\n    return false;\n  } // x * y / z --> (x * y) / z\n  // x / y * z --> (x / y) * z\n\n\n  if (nodeOp !== parentOp && multiplicativeOperators[nodeOp] && multiplicativeOperators[parentOp]) {\n    return false;\n  } // x << y << z --> (x << y) << z\n\n\n  if (bitshiftOperators[parentOp] && bitshiftOperators[nodeOp]) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isBitwiseOperator(operator) {\n  return !!bitshiftOperators[operator] || operator === \"|\" || operator === \"^\" || operator === \"&\";\n} // Tests if an expression starts with `{`, or (if forbidFunctionClassAndDoExpr\n// holds) `function`, `class`, or `do {}`. Will be overzealous if there's\n// already necessary grouping parentheses.\n\n\nfunction startsWithNoLookaheadToken(node, forbidFunctionClassAndDoExpr) {\n  node = getLeftMost(node);\n\n  switch (node.type) {\n    case \"FunctionExpression\":\n    case \"ClassExpression\":\n    case \"DoExpression\":\n      return forbidFunctionClassAndDoExpr;\n\n    case \"ObjectExpression\":\n      return true;\n\n    case \"MemberExpression\":\n      return startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\n\n    case \"TaggedTemplateExpression\":\n      if (node.tag.type === \"FunctionExpression\") {\n        // IIFEs are always already parenthesized\n        return false;\n      }\n\n      return startsWithNoLookaheadToken(node.tag, forbidFunctionClassAndDoExpr);\n\n    case \"CallExpression\":\n      if (node.callee.type === \"FunctionExpression\") {\n        // IIFEs are always already parenthesized\n        return false;\n      }\n\n      return startsWithNoLookaheadToken(node.callee, forbidFunctionClassAndDoExpr);\n\n    case \"ConditionalExpression\":\n      return startsWithNoLookaheadToken(node.test, forbidFunctionClassAndDoExpr);\n\n    case \"UpdateExpression\":\n      return !node.prefix && startsWithNoLookaheadToken(node.argument, forbidFunctionClassAndDoExpr);\n\n    case \"BindExpression\":\n      return node.object && startsWithNoLookaheadToken(node.object, forbidFunctionClassAndDoExpr);\n\n    case \"SequenceExpression\":\n      return startsWithNoLookaheadToken(node.expressions[0], forbidFunctionClassAndDoExpr);\n\n    case \"TSAsExpression\":\n      return startsWithNoLookaheadToken(node.expression, forbidFunctionClassAndDoExpr);\n\n    default:\n      return false;\n  }\n}\n\nfunction getLeftMost(node) {\n  if (node.left) {\n    return getLeftMost(node.left);\n  }\n\n  return node;\n}\n\nfunction getAlignmentSize(value, tabWidth, startIndex) {\n  startIndex = startIndex || 0;\n  var size = 0;\n\n  for (var i = startIndex; i < value.length; ++i) {\n    if (value[i] === \"\\t\") {\n      // Tabs behave in a way that they are aligned to the nearest\n      // multiple of tabWidth:\n      // 0 -> 4, 1 -> 4, 2 -> 4, 3 -> 4\n      // 4 -> 8, 5 -> 8, 6 -> 8, 7 -> 8 ...\n      size = size + tabWidth - size % tabWidth;\n    } else {\n      size++;\n    }\n  }\n\n  return size;\n}\n\nfunction getIndentSize(value, tabWidth) {\n  var lastNewlineIndex = value.lastIndexOf(\"\\n\");\n\n  if (lastNewlineIndex === -1) {\n    return 0;\n  }\n\n  return getAlignmentSize( // All the leading whitespaces\n  value.slice(lastNewlineIndex + 1).match(/^[ \\t]*/)[0], tabWidth);\n}\n\nfunction getPreferredQuote(raw, preferredQuote) {\n  // `rawContent` is the string exactly like it appeared in the input source\n  // code, without its enclosing quotes.\n  var rawContent = raw;\n  var _double = {\n    quote: '\"',\n    regex: /\"/g\n  };\n  var single = {\n    quote: \"'\",\n    regex: /'/g\n  };\n  var preferred = preferredQuote === \"'\" ? single : _double;\n  var alternate = preferred === single ? _double : single;\n  var result = preferred.quote; // If `rawContent` contains at least one of the quote preferred for enclosing\n  // the string, we might want to enclose with the alternate quote instead, to\n  // minimize the number of escaped quotes.\n\n  if (rawContent.includes(preferred.quote) || rawContent.includes(alternate.quote)) {\n    var numPreferredQuotes = (rawContent.match(preferred.regex) || []).length;\n    var numAlternateQuotes = (rawContent.match(alternate.regex) || []).length;\n    result = numPreferredQuotes > numAlternateQuotes ? alternate.quote : preferred.quote;\n  }\n\n  return result;\n}\n\nfunction printString(raw, options, isDirectiveLiteral) {\n  // `rawContent` is the string exactly like it appeared in the input source\n  // code, without its enclosing quotes.\n  var rawContent = raw; // Check for the alternate quote, to determine if we're allowed to swap\n  // the quotes on a DirectiveLiteral.\n\n  var canChangeDirectiveQuotes = !rawContent.includes('\"') && !rawContent.includes(\"'\");\n  var enclosingQuote = options.parser === \"json\" ? '\"' : options.__isInHtmlAttribute ? \"'\" : getPreferredQuote(raw, options.singleQuote ? \"'\" : '\"'); // Directives are exact code unit sequences, which means that you can't\n  // change the escape sequences they use.\n  // See https://github.com/prettier/prettier/issues/1555\n  // and https://tc39.github.io/ecma262/#directive-prologue\n\n  if (isDirectiveLiteral) {\n    if (canChangeDirectiveQuotes) {\n      return enclosingQuote + rawContent + enclosingQuote;\n    }\n\n    return raw;\n  } // It might sound unnecessary to use `makeString` even if the string already\n  // is enclosed with `enclosingQuote`, but it isn't. The string could contain\n  // unnecessary escapes (such as in `\"\\'\"`). Always using `makeString` makes\n  // sure that we consistently output the minimum amount of escaped quotes.\n\n\n  return makeString(rawContent, enclosingQuote, !(options.parser === \"css\" || options.parser === \"less\" || options.parser === \"scss\" || options.embeddedInHtml));\n}\n\nfunction makeString(rawContent, enclosingQuote, unescapeUnnecessaryEscapes) {\n  var otherQuote = enclosingQuote === '\"' ? \"'\" : '\"'; // Matches _any_ escape and unescaped quotes (both single and double).\n\n  var regex = /\\\\([\\s\\S])|(['\"])/g; // Escape and unescape single and double quotes as needed to be able to\n  // enclose `rawContent` with `enclosingQuote`.\n\n  var newContent = rawContent.replace(regex, function (match, escaped, quote) {\n    // If we matched an escape, and the escaped character is a quote of the\n    // other type than we intend to enclose the string with, there's no need for\n    // it to be escaped, so return it _without_ the backslash.\n    if (escaped === otherQuote) {\n      return escaped;\n    } // If we matched an unescaped quote and it is of the _same_ type as we\n    // intend to enclose the string with, it must be escaped, so return it with\n    // a backslash.\n\n\n    if (quote === enclosingQuote) {\n      return \"\\\\\" + quote;\n    }\n\n    if (quote) {\n      return quote;\n    } // Unescape any unnecessarily escaped character.\n    // Adapted from https://github.com/eslint/eslint/blob/de0b4ad7bd820ade41b1f606008bea68683dc11a/lib/rules/no-useless-escape.js#L27\n\n\n    return unescapeUnnecessaryEscapes && /^[^\\\\nrvtbfux\\r\\n\\u2028\\u2029\"'0-7]$/.test(escaped) ? escaped : \"\\\\\" + escaped;\n  });\n  return enclosingQuote + newContent + enclosingQuote;\n}\n\nfunction printNumber(rawNumber) {\n  return rawNumber.toLowerCase() // Remove unnecessary plus and zeroes from scientific notation.\n  .replace(/^([+-]?[\\d.]+e)(?:\\+|(-))?0*(\\d)/, \"$1$2$3\") // Remove unnecessary scientific notation (1e0).\n  .replace(/^([+-]?[\\d.]+)e[+-]?0+$/, \"$1\") // Make sure numbers always start with a digit.\n  .replace(/^([+-])?\\./, \"$10.\") // Remove extraneous trailing decimal zeroes.\n  .replace(/(\\.\\d+?)0+(?=e|$)/, \"$1\") // Remove trailing dot.\n  .replace(/\\.(?=e|$)/, \"\");\n}\n\nfunction getMaxContinuousCount(str, target) {\n  var results = str.match(new RegExp(\"(\".concat(escapeStringRegexp(target), \")+\"), \"g\"));\n\n  if (results === null) {\n    return 0;\n  }\n\n  return results.reduce(function (maxCount, result) {\n    return Math.max(maxCount, result.length / target.length);\n  }, 0);\n}\n\nfunction getMinNotPresentContinuousCount(str, target) {\n  var matches = str.match(new RegExp(\"(\".concat(escapeStringRegexp(target), \")+\"), \"g\"));\n\n  if (matches === null) {\n    return 0;\n  }\n\n  var countPresent = new Map();\n  var max = 0;\n\n  var _iterator = _createForOfIteratorHelper(matches),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var match = _step.value;\n      var count = match.length / target.length;\n      countPresent.set(count, true);\n\n      if (count > max) {\n        max = count;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  for (var i = 1; i < max; i++) {\n    if (!countPresent.get(i)) {\n      return i;\n    }\n  }\n\n  return max + 1;\n}\n\nfunction getStringWidth(text) {\n  if (!text) {\n    return 0;\n  } // shortcut to avoid needless string `RegExp`s, replacements, and allocations within `string-width`\n\n\n  if (!notAsciiRegex.test(text)) {\n    return text.length;\n  }\n\n  return stringWidth(text);\n}\n\nfunction hasIgnoreComment(path) {\n  var node = path.getValue();\n  return hasNodeIgnoreComment(node);\n}\n\nfunction hasNodeIgnoreComment(node) {\n  return node && node.comments && node.comments.length > 0 && node.comments.some(function (comment) {\n    return comment.value.trim() === \"prettier-ignore\";\n  });\n}\n\nfunction matchAncestorTypes(path, types, index) {\n  index = index || 0;\n  types = types.slice();\n\n  while (types.length) {\n    var parent = path.getParentNode(index);\n    var type = types.shift();\n\n    if (!parent || parent.type !== type) {\n      return false;\n    }\n\n    index++;\n  }\n\n  return true;\n}\n\nfunction addCommentHelper(node, comment) {\n  var comments = node.comments || (node.comments = []);\n  comments.push(comment);\n  comment.printed = false; // For some reason, TypeScript parses `// x` inside of JSXText as a comment\n  // We already \"print\" it via the raw text, we don't need to re-print it as a\n  // comment\n\n  if (node.type === \"JSXText\") {\n    comment.printed = true;\n  }\n}\n\nfunction addLeadingComment(node, comment) {\n  comment.leading = true;\n  comment.trailing = false;\n  addCommentHelper(node, comment);\n}\n\nfunction addDanglingComment(node, comment) {\n  comment.leading = false;\n  comment.trailing = false;\n  addCommentHelper(node, comment);\n}\n\nfunction addTrailingComment(node, comment) {\n  comment.leading = false;\n  comment.trailing = true;\n  addCommentHelper(node, comment);\n}\n\nfunction isWithinParentArrayProperty(path, propertyName) {\n  var node = path.getValue();\n  var parent = path.getParentNode();\n\n  if (parent == null) {\n    return false;\n  }\n\n  if (!Array.isArray(parent[propertyName])) {\n    return false;\n  }\n\n  var key = path.getName();\n  return parent[propertyName][key] === node;\n}\n\nfunction replaceEndOfLineWith(text, replacement) {\n  var parts = [];\n\n  var _iterator2 = _createForOfIteratorHelper(text.split(\"\\n\")),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var part = _step2.value;\n\n      if (parts.length !== 0) {\n        parts.push(replacement);\n      }\n\n      parts.push(part);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return parts;\n}\n\nmodule.exports = {\n  replaceEndOfLineWith: replaceEndOfLineWith,\n  getStringWidth: getStringWidth,\n  getMaxContinuousCount: getMaxContinuousCount,\n  getMinNotPresentContinuousCount: getMinNotPresentContinuousCount,\n  getPrecedence: getPrecedence,\n  shouldFlatten: shouldFlatten,\n  isBitwiseOperator: isBitwiseOperator,\n  isExportDeclaration: isExportDeclaration,\n  getParentExportDeclaration: getParentExportDeclaration,\n  getPenultimate: getPenultimate,\n  getLast: getLast,\n  getNextNonSpaceNonCommentCharacterIndexWithStartIndex: getNextNonSpaceNonCommentCharacterIndexWithStartIndex,\n  getNextNonSpaceNonCommentCharacterIndex: getNextNonSpaceNonCommentCharacterIndex,\n  getNextNonSpaceNonCommentCharacter: getNextNonSpaceNonCommentCharacter,\n  skip: skip,\n  skipWhitespace: skipWhitespace,\n  skipSpaces: skipSpaces,\n  skipToLineEnd: skipToLineEnd,\n  skipEverythingButNewLine: skipEverythingButNewLine,\n  skipInlineComment: skipInlineComment,\n  skipTrailingComment: skipTrailingComment,\n  skipNewline: skipNewline,\n  isNextLineEmptyAfterIndex: isNextLineEmptyAfterIndex,\n  isNextLineEmpty: isNextLineEmpty,\n  isPreviousLineEmpty: isPreviousLineEmpty,\n  hasNewline: hasNewline,\n  hasNewlineInRange: hasNewlineInRange,\n  hasSpaces: hasSpaces,\n  setLocStart: setLocStart,\n  setLocEnd: setLocEnd,\n  startsWithNoLookaheadToken: startsWithNoLookaheadToken,\n  getAlignmentSize: getAlignmentSize,\n  getIndentSize: getIndentSize,\n  getPreferredQuote: getPreferredQuote,\n  printString: printString,\n  printNumber: printNumber,\n  hasIgnoreComment: hasIgnoreComment,\n  hasNodeIgnoreComment: hasNodeIgnoreComment,\n  makeString: makeString,\n  matchAncestorTypes: matchAncestorTypes,\n  addLeadingComment: addLeadingComment,\n  addDanglingComment: addDanglingComment,\n  addTrailingComment: addTrailingComment,\n  isWithinParentArrayProperty: isWithinParentArrayProperty\n};","map":null,"metadata":{},"sourceType":"script"}