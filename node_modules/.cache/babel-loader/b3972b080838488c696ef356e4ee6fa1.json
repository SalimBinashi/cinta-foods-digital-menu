{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _taggedTemplateLiteral = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _templateObject;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction helpers() {\n  var data = require(\"@babel/helpers\");\n\n  helpers = function helpers() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  var data = require(\"@babel/generator\");\n\n  _generator = function _generator() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _template() {\n  var data = require(\"@babel/template\");\n\n  _template = function _template() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  var data = require(\"@babel/types\");\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"../transformation/file/file\");\n\nvar buildUmdWrapper = function buildUmdWrapper(replacements) {\n  return (0, _template().default)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    (function (root, factory) {\\n      if (typeof define === \\\"function\\\" && define.amd) {\\n        define(AMD_ARGUMENTS, factory);\\n      } else if (typeof exports === \\\"object\\\") {\\n        factory(COMMON_ARGUMENTS);\\n      } else {\\n        factory(BROWSER_ARGUMENTS);\\n      }\\n    })(UMD_ROOT, function (FACTORY_PARAMETERS) {\\n      FACTORY_BODY\\n    });\\n  \"])))(replacements);\n};\n\nfunction buildGlobal(allowlist) {\n  var namespace = t().identifier(\"babelHelpers\");\n  var body = [];\n  var container = t().functionExpression(null, [t().identifier(\"global\")], t().blockStatement(body));\n  var tree = t().program([t().expressionStatement(t().callExpression(container, [t().conditionalExpression(t().binaryExpression(\"===\", t().unaryExpression(\"typeof\", t().identifier(\"global\")), t().stringLiteral(\"undefined\")), t().identifier(\"self\"), t().identifier(\"global\"))]))]);\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"global\"), namespace), t().objectExpression([])))]));\n  buildHelpers(body, namespace, allowlist);\n  return tree;\n}\n\nfunction buildModule(allowlist) {\n  var body = [];\n  var refs = buildHelpers(body, null, allowlist);\n  body.unshift(t().exportNamedDeclaration(null, Object.keys(refs).map(function (name) {\n    return t().exportSpecifier(t().cloneNode(refs[name]), t().identifier(name));\n  })));\n  return t().program(body, [], \"module\");\n}\n\nfunction buildUmd(allowlist) {\n  var namespace = t().identifier(\"babelHelpers\");\n  var body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().identifier(\"global\"))]));\n  buildHelpers(body, namespace, allowlist);\n  return t().program([buildUmdWrapper({\n    FACTORY_PARAMETERS: t().identifier(\"global\"),\n    BROWSER_ARGUMENTS: t().assignmentExpression(\"=\", t().memberExpression(t().identifier(\"root\"), namespace), t().objectExpression([])),\n    COMMON_ARGUMENTS: t().identifier(\"exports\"),\n    AMD_ARGUMENTS: t().arrayExpression([t().stringLiteral(\"exports\")]),\n    FACTORY_BODY: body,\n    UMD_ROOT: t().identifier(\"this\")\n  })]);\n}\n\nfunction buildVar(allowlist) {\n  var namespace = t().identifier(\"babelHelpers\");\n  var body = [];\n  body.push(t().variableDeclaration(\"var\", [t().variableDeclarator(namespace, t().objectExpression([]))]));\n  var tree = t().program(body);\n  buildHelpers(body, namespace, allowlist);\n  body.push(t().expressionStatement(namespace));\n  return tree;\n}\n\nfunction buildHelpers(body, namespace, allowlist) {\n  var getHelperReference = function getHelperReference(name) {\n    return namespace ? t().memberExpression(namespace, t().identifier(name)) : t().identifier(\"_\".concat(name));\n  };\n\n  var refs = {};\n  helpers().list.forEach(function (name) {\n    if (allowlist && allowlist.indexOf(name) < 0) return;\n    var ref = refs[name] = getHelperReference(name);\n    helpers().ensure(name, _file.default);\n\n    var _helpers$get = helpers().get(name, getHelperReference, ref),\n        nodes = _helpers$get.nodes;\n\n    body.push.apply(body, _toConsumableArray(nodes));\n  });\n  return refs;\n}\n\nfunction _default(allowlist) {\n  var outputType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"global\";\n  var tree;\n  var build = {\n    global: buildGlobal,\n    module: buildModule,\n    umd: buildUmd,\n    var: buildVar\n  }[outputType];\n\n  if (build) {\n    tree = build(allowlist);\n  } else {\n    throw new Error(\"Unsupported output type \".concat(outputType));\n  }\n\n  return (0, _generator().default)(tree).code;\n}","map":null,"metadata":{},"sourceType":"script"}