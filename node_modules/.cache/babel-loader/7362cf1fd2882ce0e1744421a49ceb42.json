{"ast":null,"code":"module.exports = State;\n\nfunction State(options, params, handleQuery) {\n  options = options || {}; //this.options = options\n\n  this.handleQuery = handleQuery;\n  this.options = options;\n  this.locals = this.options.locals || {};\n  this.globals = this.options.globals || {};\n  this.rootContext = firstNonNull(options.data, options.rootContext, options.context, options.source);\n  this.parent = options.parent;\n  this.override = options.override;\n  this.filters = options.filters || {};\n  this.params = params || options.params || [];\n  this.context = firstNonNull(options.currentItem, options.context, options.source);\n  this.currentItem = firstNonNull(this.context, options.rootContext, options.data);\n  this.currentKey = null;\n  this.currentReferences = [];\n  this.currentParents = [];\n}\n\nState.prototype = {\n  // current manipulation\n  setCurrent: function setCurrent(key, value) {\n    if (this.currentItem || this.currentKey || this.currentParents.length > 0) {\n      this.currentParents.push({\n        key: this.currentKey,\n        value: this.currentItem\n      });\n    }\n\n    this.currentItem = value;\n    this.currentKey = key;\n  },\n  resetCurrent: function resetCurrent() {\n    this.currentItem = null;\n    this.currentKey = null;\n    this.currentParents = [];\n  },\n  force: function force(def) {\n    var parent = this.currentParents[this.currentParents.length - 1];\n\n    if (!this.currentItem && parent && this.currentKey != null) {\n      this.currentItem = def || {};\n      parent.value[this.currentKey] = this.currentItem;\n    }\n\n    return !!this.currentItem;\n  },\n  getLocal: function getLocal(localName) {\n    if (~localName.indexOf('/')) {\n      var result = null;\n      var parts = localName.split('/');\n\n      for (var i = 0; i < parts.length; i++) {\n        var part = parts[i];\n\n        if (i == 0) {\n          result = this.locals[part];\n        } else if (result && result[part]) {\n          result = result[part];\n        }\n      }\n\n      return result;\n    } else {\n      return this.locals[localName];\n    }\n  },\n  getGlobal: function getGlobal(globalName) {\n    if (~globalName.indexOf('/')) {\n      var result = null;\n      var parts = globalName.split('/');\n\n      for (var i = 0; i < parts.length; i++) {\n        var part = parts[i];\n\n        if (i == 0) {\n          result = this.globals[part];\n        } else if (result && result[part]) {\n          result = result[part];\n        }\n      }\n\n      return result;\n    } else {\n      return this.globals[globalName];\n    }\n  },\n  getFilter: function getFilter(filterName) {\n    if (~filterName.indexOf('/')) {\n      var result = null;\n      var filterParts = filterName.split('/');\n\n      for (var i = 0; i < filterParts.length; i++) {\n        var part = filterParts[i];\n\n        if (i == 0) {\n          result = this.filters[part];\n        } else if (result && result[part]) {\n          result = result[part];\n        }\n      }\n\n      return result;\n    } else {\n      return this.filters[filterName];\n    }\n  },\n  addReferences: function addReferences(references) {\n    if (references) {\n      references.forEach(this.addReference, this);\n    }\n  },\n  addReference: function addReference(ref) {\n    if (ref instanceof Object && !~this.currentReferences.indexOf(ref)) {\n      this.currentReferences.push(ref);\n    }\n  },\n  // helper functions\n  getValues: function getValues(values, callback) {\n    return values.map(this.getValue, this);\n  },\n  getValue: function getValue(value) {\n    return this.getValueFrom(value, null);\n  },\n  getValueFrom: function getValueFrom(value, item) {\n    if (value._param != null) {\n      return this.params[value._param];\n    } else if (value._sub) {\n      var options = copy(this.options);\n      options.force = null;\n      options.currentItem = item;\n      var result = this.handleQuery(value._sub, options, this.params);\n      this.addReferences(result.references);\n      return result.value;\n    } else {\n      return value;\n    }\n  },\n  deepQuery: function deepQuery(source, tokens, options, callback) {\n    var keys = Object.keys(source);\n\n    for (var key in source) {\n      if (key in source) {\n        var options = copy(this.options);\n        options.currentItem = source[key];\n        var result = this.handleQuery(tokens, options, this.params);\n\n        if (result.value) {\n          return result;\n        }\n      }\n    }\n\n    return null;\n  }\n};\n\nfunction firstNonNull(args) {\n  for (var i = 0; i < arguments.length; i++) {\n    if (arguments[i] != null) {\n      return arguments[i];\n    }\n  }\n}\n\nfunction copy(obj) {\n  var result = {};\n\n  if (obj) {\n    for (var key in obj) {\n      if (key in obj) {\n        result[key] = obj[key];\n      }\n    }\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}