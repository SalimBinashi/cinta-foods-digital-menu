{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar HANDLER_KEYS = ['default', 'expected', 'validate', 'deprecated', 'forward', 'redirect', 'overlap', 'preprocess', 'postprocess'];\n\nfunction createSchema(SchemaConstructor, parameters) {\n  var schema = new SchemaConstructor(parameters);\n  var subSchema = Object.create(schema);\n\n  var _iterator = _createForOfIteratorHelper(HANDLER_KEYS),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var handlerKey = _step.value;\n\n      if (handlerKey in parameters) {\n        subSchema[handlerKey] = normalizeHandler(parameters[handlerKey], schema, Schema.prototype[handlerKey].length);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return subSchema;\n}\n\nexports.createSchema = createSchema;\n\nvar Schema = /*#__PURE__*/function () {\n  function Schema(parameters) {\n    _classCallCheck(this, Schema);\n\n    this.name = parameters.name;\n  }\n\n  _createClass(Schema, [{\n    key: \"default\",\n    value: function _default(_utils) {\n      return undefined;\n    } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\n\n  }, {\n    key: \"expected\",\n    value: function expected(_utils) {\n      return 'nothing';\n    } // istanbul ignore next: this is actually an abstract method but we need a placeholder to get `function.length`\n\n  }, {\n    key: \"validate\",\n    value: function validate(_value, _utils) {\n      return false;\n    }\n  }, {\n    key: \"deprecated\",\n    value: function deprecated(_value, _utils) {\n      return false;\n    }\n  }, {\n    key: \"forward\",\n    value: function forward(_value, _utils) {\n      return undefined;\n    }\n  }, {\n    key: \"redirect\",\n    value: function redirect(_value, _utils) {\n      return undefined;\n    }\n  }, {\n    key: \"overlap\",\n    value: function overlap(currentValue, _newValue, _utils) {\n      return currentValue;\n    }\n  }, {\n    key: \"preprocess\",\n    value: function preprocess(value, _utils) {\n      return value;\n    }\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(value, _utils) {\n      return value;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(parameters) {\n      // @ts-ignore: https://github.com/Microsoft/TypeScript/issues/5863\n      return createSchema(this, parameters);\n    }\n  }]);\n\n  return Schema;\n}();\n\nexports.Schema = Schema;\n\nfunction normalizeHandler(handler, superSchema, handlerArgumentsLength) {\n  return typeof handler === 'function' ? function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return handler.apply(void 0, _toConsumableArray(args.slice(0, handlerArgumentsLength - 1)).concat([superSchema], _toConsumableArray(args.slice(handlerArgumentsLength - 1))));\n  } : function () {\n    return handler;\n  };\n}","map":null,"metadata":{},"sourceType":"script"}