{"ast":null,"code":"/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { clone } from '../utils';\nimport { PropTypes, formatCode as rvFormatCode } from '../';\nimport { addToImportList } from '../code-generator';\n\nvar formatCode = function formatCode(code) {\n  if (code && typeof code === 'string') {\n    var isJsx = code.startsWith('<');\n\n    try {\n      if (isJsx) {\n        code = rvFormatCode(\"<>\".concat(code, \"</>\"));\n      } else {\n        code = rvFormatCode(\"<>{\".concat(code, \"}</>\"));\n      }\n\n      var addSpaces = !code.startsWith('<>\\n');\n\n      if (isJsx) {\n        code = code.replace(/^<>\\s*/, '').replace(/\\s*<\\/>$/, '');\n      } else {\n        code = code.replace(/^<>\\s*\\{/, '').replace(/\\}\\s*<\\/>$/, '');\n      }\n\n      if (addSpaces) {\n        code = code.replace(/\\n/g, '\\n  ');\n      }\n    } catch (e) {}\n\n    code = code.replace(/\\}/g, '\\\\}').replace(/\\$/g, '\\\\$');\n  }\n\n  return code;\n};\n\nvar joinNamed = function joinNamed(items, ctr) {\n  if (!items) return '';\n  var output = \"${\".concat(ctr++, \":{\");\n\n  for (var i = 0; i < items.length; i++) {\n    if (i !== items.length - 1) {\n      output += \"${\".concat(ctr++, \":\").concat(items[i], \", }\");\n    } else {\n      output += \"${\".concat(ctr++, \":\").concat(items[i], \"}\");\n    }\n  }\n\n  return \"\".concat(output, \"\\\\}}\");\n};\n\nvar getImportBody = function getImportBody(imports, props) {\n  var importList = imports ? clone(imports) : {}; // prop level imports (typically enums related) that are displayed\n  // only when the prop is being used\n\n  props && Object.values(props).forEach(function (prop) {\n    if (prop.imports) {\n      addToImportList(importList, prop.imports);\n    }\n  });\n  var importBody = [];\n  var ctr = 1;\n\n  for (var from in importList) {\n    var def = importList[from].default;\n    var named = Array.isArray(importList[from].named) && importList[from].named.length > 0 ? importList[from].named : undefined;\n    var defaultImport = def ? \"${\".concat(ctr++, \":\").concat(def).concat(named ? ', }' : '}') : '';\n    importBody.push(\"import \".concat(defaultImport).concat(joinNamed(named, ctr), \" from '\").concat(from, \"';\"));\n\n    if (named) {\n      ctr += named.length + 1;\n    }\n  }\n\n  return importBody;\n};\n\nvar getComponentBody = function getComponentBody(componentName, props) {\n  var ctr = 1;\n  var componentBody = [\"<\".concat(componentName)];\n\n  if (props) {\n    var _loop = function _loop(propName) {\n      if (props[propName].hidden) return \"continue\";\n      if (propName === 'children') return \"continue\";\n\n      if (props[propName].type === PropTypes.Boolean) {\n        var row = \"  ${\".concat(ctr++, \":\").concat(propName, \"}\");\n        componentBody.push(row);\n      } else if (props[propName].type === PropTypes.Enum) {\n        var enumName = props[propName].imports ? props[propName].enumName || propName.toUpperCase() : null;\n        var opts = Object.values(props[propName].options).map(function (opt) {\n          return enumName ? opt.includes('-') ? \"\".concat(enumName, \"['\").concat(opt, \"']\") : \"\".concat(enumName, \".\").concat(opt) : opt;\n        }).filter(function (opt) {\n          return opt !== props[propName].defaultValue;\n        });\n\n        if (props[propName].defaultValue) {\n          opts.unshift(props[propName].defaultValue);\n        }\n\n        if (!props[propName].imports) {\n          var _row = \"  ${\".concat(ctr++, \":\").concat(propName, \"=\\\"${\").concat(ctr++, \"|\").concat(opts.join(','), \"|}\\\"}\");\n\n          componentBody.push(_row);\n        } else {\n          var _row2 = \"  ${\".concat(ctr++, \":\").concat(propName, \"={${\").concat(ctr++, \"|\").concat(opts.join(','), \"|}\\\\}}\");\n\n          componentBody.push(_row2);\n        }\n      } else if (props[propName].type === PropTypes.String && typeof props[propName].value === PropTypes.String) {\n        var _row3 = \"  ${\".concat(ctr++, \":\").concat(propName, \"=\\\"${\").concat(ctr++, \":\").concat(formatCode(props[propName].defaultValue || props[propName].value), \"}\\\"}\");\n\n        componentBody.push(_row3);\n      } else {\n        var _row4 = \"  ${\".concat(ctr++, \":\").concat(propName, \"={${\").concat(ctr++, \":\").concat(formatCode(props[propName].defaultValue || props[propName].value), \"}\\\\}}\");\n\n        componentBody.push(_row4);\n      }\n    };\n\n    for (var propName in props) {\n      var _ret = _loop(propName);\n\n      if (_ret === \"continue\") continue;\n    }\n\n    if (props['children'] && !props['children'].hidden) {\n      componentBody.push('>');\n      componentBody.push(\"  ${\".concat(ctr++, \":\").concat(formatCode(props['children'].value), \"}\"));\n      componentBody.push(\"</\".concat(componentName, \">\"));\n    } else {\n      componentBody.push(\"/>\");\n    }\n  } else {\n    componentBody.push(\"/>\");\n  }\n\n  return componentBody;\n};\n\nvar vscodeSnippet = function vscodeSnippet(_ref) {\n  var componentName = _ref.componentName,\n      prefix = _ref.prefix,\n      imports = _ref.imports,\n      props = _ref.props,\n      description = _ref.description;\n  var output = {};\n  var importBody = getImportBody(imports, props);\n\n  if (importBody.length > 0) {\n    output[\"\".concat(componentName, \" import\")] = {\n      scope: 'javascript,javascriptreact,typescript,typescriptreact',\n      prefix: [\"\".concat(prefix || componentName, \" import\")],\n      description: description || \"Base \".concat(componentName, \" import.\"),\n      body: importBody\n    };\n  }\n\n  output[\"\".concat(componentName)] = {\n    scope: 'javascript,javascriptreact,typescript,typescriptreact',\n    prefix: [\"\".concat(prefix || componentName, \" component\")],\n    description: description || \"Base \".concat(componentName, \" component.\"),\n    body: getComponentBody(componentName, props)\n  };\n  return output;\n};\n\nexport default vscodeSnippet;","map":null,"metadata":{},"sourceType":"module"}