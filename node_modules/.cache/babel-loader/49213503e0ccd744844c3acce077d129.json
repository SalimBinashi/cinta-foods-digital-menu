{"ast":null,"code":"module.exports = depthSplit;\n\nfunction depthSplit(text, delimiter, opts) {\n  var max = opts && opts.max || Infinity;\n  var includeDelimiters = opts && opts.includeDelimiters || false;\n  var depth = 0;\n  var start = 0;\n  var result = [];\n  var zones = [];\n  text.replace(/([\\[\\(\\{])|([\\]\\)\\}])/g, function (current, open, close, offset) {\n    if (open) {\n      if (depth === 0) {\n        zones.push([start, offset]);\n      }\n\n      depth += 1;\n    } else if (close) {\n      depth -= 1;\n\n      if (depth === 0) {\n        start = offset + current.length;\n      }\n    }\n  });\n\n  if (depth === 0 && start < text.length) {\n    zones.push([start, text.length]);\n  }\n\n  start = 0;\n\n  for (var i = 0; i < zones.length && max > 0; i++) {\n    for (var pos = zones[i][0], match = delimiter.exec(text.slice(pos, zones[i][1])); match && max > 1; pos += match.index + match[0].length, start = pos, match = delimiter.exec(text.slice(pos, zones[i][1]))) {\n      result.push(text.slice(start, match.index + pos));\n\n      if (includeDelimiters) {\n        result.push(match[0]);\n      }\n\n      max -= 1;\n    }\n  }\n\n  if (start < text.length) {\n    result.push(text.slice(start));\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}