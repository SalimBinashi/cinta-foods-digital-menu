{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isBrowsersQueryValid = isBrowsersQueryValid;\nexports.default = getTargets;\nObject.defineProperty(exports, \"unreleasedLabels\", {\n  enumerable: true,\n  get: function get() {\n    return _targets.unreleasedLabels;\n  }\n});\nObject.defineProperty(exports, \"TargetNames\", {\n  enumerable: true,\n  get: function get() {\n    return _options.TargetNames;\n  }\n});\nObject.defineProperty(exports, \"prettifyTargets\", {\n  enumerable: true,\n  get: function get() {\n    return _pretty.prettifyTargets;\n  }\n});\nObject.defineProperty(exports, \"getInclusionReasons\", {\n  enumerable: true,\n  get: function get() {\n    return _debug.getInclusionReasons;\n  }\n});\nObject.defineProperty(exports, \"filterItems\", {\n  enumerable: true,\n  get: function get() {\n    return _filterItems.default;\n  }\n});\nObject.defineProperty(exports, \"isRequired\", {\n  enumerable: true,\n  get: function get() {\n    return _filterItems.isRequired;\n  }\n});\n\nvar _browserslist = require(\"browserslist\");\n\nvar _helperValidatorOption = require(\"@babel/helper-validator-option\");\n\nvar _nativeModules = require(\"@babel/compat-data/native-modules\");\n\nvar _utils = require(\"./utils\");\n\nvar _targets = require(\"./targets\");\n\nvar _options = require(\"./options\");\n\nvar _pretty = require(\"./pretty\");\n\nvar _debug = require(\"./debug\");\n\nvar _filterItems = require(\"./filter-items\");\n\nvar ESM_SUPPORT = _nativeModules[\"es6.module\"];\nvar v = new _helperValidatorOption.OptionValidator(\"@babel/helper-compilation-targets\");\n\nfunction validateTargetNames(targets) {\n  var validTargets = Object.keys(_options.TargetNames);\n\n  for (var _i = 0, _Object$keys = Object.keys(targets); _i < _Object$keys.length; _i++) {\n    var target = _Object$keys[_i];\n\n    if (!(target in _options.TargetNames)) {\n      throw new Error(v.formatMessage(\"'\".concat(target, \"' is not a valid target\\n- Did you mean '\").concat((0, _helperValidatorOption.findSuggestion)(target, validTargets), \"'?\")));\n    }\n  }\n\n  return targets;\n}\n\nfunction isBrowsersQueryValid(browsers) {\n  return typeof browsers === \"string\" || Array.isArray(browsers) && browsers.every(function (b) {\n    return typeof b === \"string\";\n  });\n}\n\nfunction validateBrowsers(browsers) {\n  v.invariant(browsers === undefined || isBrowsersQueryValid(browsers), \"'\".concat(String(browsers), \"' is not a valid browserslist query\"));\n  return browsers;\n}\n\nfunction getLowestVersions(browsers) {\n  return browsers.reduce(function (all, browser) {\n    var _browser$split = browser.split(\" \"),\n        _browser$split2 = _slicedToArray(_browser$split, 2),\n        browserName = _browser$split2[0],\n        browserVersion = _browser$split2[1];\n\n    var normalizedBrowserName = _targets.browserNameMap[browserName];\n\n    if (!normalizedBrowserName) {\n      return all;\n    }\n\n    try {\n      var splitVersion = browserVersion.split(\"-\")[0].toLowerCase();\n      var isSplitUnreleased = (0, _utils.isUnreleasedVersion)(splitVersion, browserName);\n\n      if (!all[normalizedBrowserName]) {\n        all[normalizedBrowserName] = isSplitUnreleased ? splitVersion : (0, _utils.semverify)(splitVersion);\n        return all;\n      }\n\n      var version = all[normalizedBrowserName];\n      var isUnreleased = (0, _utils.isUnreleasedVersion)(version, browserName);\n\n      if (isUnreleased && isSplitUnreleased) {\n        all[normalizedBrowserName] = (0, _utils.getLowestUnreleased)(version, splitVersion, browserName);\n      } else if (isUnreleased) {\n        all[normalizedBrowserName] = (0, _utils.semverify)(splitVersion);\n      } else if (!isUnreleased && !isSplitUnreleased) {\n        var parsedBrowserVersion = (0, _utils.semverify)(splitVersion);\n        all[normalizedBrowserName] = (0, _utils.semverMin)(version, parsedBrowserVersion);\n      }\n    } catch (e) {}\n\n    return all;\n  }, {});\n}\n\nfunction outputDecimalWarning(decimalTargets) {\n  if (!decimalTargets.length) {\n    return;\n  }\n\n  console.warn(\"Warning, the following targets are using a decimal version:\\n\");\n  decimalTargets.forEach(function (_ref) {\n    var target = _ref.target,\n        value = _ref.value;\n    return console.warn(\"  \".concat(target, \": \").concat(value));\n  });\n  console.warn(\"\\nWe recommend using a string for minor/patch versions to avoid numbers like 6.10\\ngetting parsed as 6.1, which can lead to unexpected behavior.\\n\");\n}\n\nfunction semverifyTarget(target, value) {\n  try {\n    return (0, _utils.semverify)(value);\n  } catch (error) {\n    throw new Error(v.formatMessage(\"'\".concat(value, \"' is not a valid value for 'targets.\").concat(target, \"'.\")));\n  }\n}\n\nvar targetParserMap = {\n  __default: function __default(target, value) {\n    var version = (0, _utils.isUnreleasedVersion)(value, target) ? value.toLowerCase() : semverifyTarget(target, value);\n    return [target, version];\n  },\n  node: function node(target, value) {\n    var parsed = value === true || value === \"current\" ? process.versions.node : semverifyTarget(target, value);\n    return [target, parsed];\n  }\n};\n\nfunction generateTargets(inputTargets) {\n  var input = Object.assign({}, inputTargets);\n  delete input.esmodules;\n  delete input.browsers;\n  return input;\n}\n\nfunction resolveTargets(queries) {\n  var resolved = _browserslist(queries, {\n    mobileToDesktop: true\n  });\n\n  return getLowestVersions(resolved);\n}\n\nfunction getTargets() {\n  var inputTargets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _browsers;\n\n  var browsers = inputTargets.browsers,\n      esmodules = inputTargets.esmodules;\n  var _options$configPath = options.configPath,\n      configPath = _options$configPath === void 0 ? \".\" : _options$configPath;\n  validateBrowsers(browsers);\n  var input = generateTargets(inputTargets);\n  var targets = validateTargetNames(input);\n  var shouldParseBrowsers = !!browsers;\n  var hasTargets = shouldParseBrowsers || Object.keys(targets).length > 0;\n  var shouldSearchForConfig = !options.ignoreBrowserslistConfig && !hasTargets;\n\n  if (!browsers && shouldSearchForConfig) {\n    browsers = _browserslist.loadConfig({\n      config: options.configFile,\n      path: configPath,\n      env: options.browserslistEnv\n    });\n\n    if (browsers == null) {\n      {\n        browsers = [];\n      }\n    }\n  }\n\n  if (esmodules && (esmodules !== \"intersect\" || !((_browsers = browsers) != null && _browsers.length))) {\n    browsers = Object.keys(ESM_SUPPORT).map(function (browser) {\n      return \"\".concat(browser, \" >= \").concat(ESM_SUPPORT[browser]);\n    }).join(\", \");\n    esmodules = false;\n  }\n\n  if (browsers) {\n    var queryBrowsers = resolveTargets(browsers);\n\n    if (esmodules === \"intersect\") {\n      for (var _i2 = 0, _Object$keys2 = Object.keys(queryBrowsers); _i2 < _Object$keys2.length; _i2++) {\n        var browser = _Object$keys2[_i2];\n        var version = queryBrowsers[browser];\n\n        if (ESM_SUPPORT[browser]) {\n          queryBrowsers[browser] = (0, _utils.getHighestUnreleased)(version, (0, _utils.semverify)(ESM_SUPPORT[browser]), browser);\n        } else {\n          delete queryBrowsers[browser];\n        }\n      }\n    }\n\n    targets = Object.assign(queryBrowsers, targets);\n  }\n\n  var result = {};\n  var decimalWarnings = [];\n\n  var _iterator = _createForOfIteratorHelper(Object.keys(targets).sort()),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var target = _step.value;\n\n      var _targetParserMap$targ;\n\n      var value = targets[target];\n\n      if (typeof value === \"number\" && value % 1 !== 0) {\n        decimalWarnings.push({\n          target: target,\n          value: value\n        });\n      }\n\n      var parser = (_targetParserMap$targ = targetParserMap[target]) != null ? _targetParserMap$targ : targetParserMap.__default;\n\n      var _parser = parser(target, value),\n          _parser2 = _slicedToArray(_parser, 2),\n          parsedTarget = _parser2[0],\n          parsedValue = _parser2[1];\n\n      if (parsedValue) {\n        result[parsedTarget] = parsedValue;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  outputDecimalWarning(decimalWarnings);\n  return result;\n}","map":null,"metadata":{},"sourceType":"script"}