{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction massageAST(ast, options, parent) {\n  if (Array.isArray(ast)) {\n    return ast.map(function (e) {\n      return massageAST(e, options, parent);\n    }).filter(function (e) {\n      return e;\n    });\n  }\n\n  if (!ast || _typeof(ast) !== \"object\") {\n    return ast;\n  }\n\n  var newObj = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(ast); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n\n    if (typeof ast[key] !== \"function\") {\n      newObj[key] = massageAST(ast[key], options, ast);\n    }\n  }\n\n  if (options.printer.massageAstNode) {\n    var result = options.printer.massageAstNode(ast, newObj, parent);\n\n    if (result === null) {\n      return undefined;\n    }\n\n    if (result) {\n      return result;\n    }\n  }\n\n  return newObj;\n}\n\nmodule.exports = massageAST;","map":null,"metadata":{},"sourceType":"script"}