{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(findPackageData),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(findRelativeConfig),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(findRootConfig),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadConfig),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(resolveShowConfigPath);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.findConfigUpwards = findConfigUpwards;\nexports.findPackageData = findPackageData;\nexports.findRelativeConfig = findRelativeConfig;\nexports.findRootConfig = findRootConfig;\nexports.loadConfig = loadConfig;\nexports.resolveShowConfigPath = resolveShowConfigPath;\nexports.resolvePlugin = resolvePlugin;\nexports.resolvePreset = resolvePreset;\nexports.loadPlugin = loadPlugin;\nexports.loadPreset = loadPreset;\nexports.ROOT_CONFIG_FILENAMES = void 0;\n\nfunction findConfigUpwards(rootDir) {\n  return null;\n}\n\nfunction findPackageData(filepath) {\n  return _regeneratorRuntime.wrap(function findPackageData$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            filepath: filepath,\n            directories: [],\n            pkg: null,\n            isPackage: false\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction findRelativeConfig(pkgData, envName, caller) {\n  return _regeneratorRuntime.wrap(function findRelativeConfig$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", {\n            config: null,\n            ignore: null\n          });\n\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction findRootConfig(dirname, envName, caller) {\n  return _regeneratorRuntime.wrap(function findRootConfig$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", null);\n\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction loadConfig(name, dirname, envName, caller) {\n  return _regeneratorRuntime.wrap(function loadConfig$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          throw new Error(\"Cannot load \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction resolveShowConfigPath(dirname) {\n  return _regeneratorRuntime.wrap(function resolveShowConfigPath$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", null);\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nvar ROOT_CONFIG_FILENAMES = [];\nexports.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;\n\nfunction resolvePlugin(name, dirname) {\n  return null;\n}\n\nfunction resolvePreset(name, dirname) {\n  return null;\n}\n\nfunction loadPlugin(name, dirname) {\n  throw new Error(\"Cannot load plugin \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n}\n\nfunction loadPreset(name, dirname) {\n  throw new Error(\"Cannot load preset \".concat(name, \" relative to \").concat(dirname, \" in a browser\"));\n}","map":null,"metadata":{},"sourceType":"script"}