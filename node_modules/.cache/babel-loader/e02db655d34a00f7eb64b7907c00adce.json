{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _defineProperty = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar defaults_1 = require(\"./defaults\");\n\nvar utils_1 = require(\"./utils\");\n\nexports.normalize = function (options, schemas, opts) {\n  return new Normalizer(schemas, opts).normalize(options);\n};\n\nvar Normalizer = /*#__PURE__*/function () {\n  function Normalizer(schemas, opts) {\n    _classCallCheck(this, Normalizer);\n\n    // istanbul ignore next\n    var _ref = opts || {},\n        _ref$logger = _ref.logger,\n        logger = _ref$logger === void 0 ? console : _ref$logger,\n        _ref$descriptor = _ref.descriptor,\n        descriptor = _ref$descriptor === void 0 ? defaults_1.defaultDescriptor : _ref$descriptor,\n        _ref$unknown = _ref.unknown,\n        unknown = _ref$unknown === void 0 ? defaults_1.defaultUnknownHandler : _ref$unknown,\n        _ref$invalid = _ref.invalid,\n        invalid = _ref$invalid === void 0 ? defaults_1.defaultInvalidHandler : _ref$invalid,\n        _ref$deprecated = _ref.deprecated,\n        deprecated = _ref$deprecated === void 0 ? defaults_1.defaultDeprecatedHandler : _ref$deprecated;\n\n    this._utils = {\n      descriptor: descriptor,\n      logger:\n      /* istanbul ignore next */\n      logger || {\n        warn: function warn() {}\n      },\n      schemas: utils_1.recordFromArray(schemas, 'name'),\n      normalizeDefaultResult: utils_1.normalizeDefaultResult,\n      normalizeDeprecatedResult: utils_1.normalizeDeprecatedResult,\n      normalizeForwardResult: utils_1.normalizeForwardResult,\n      normalizeRedirectResult: utils_1.normalizeRedirectResult,\n      normalizeValidateResult: utils_1.normalizeValidateResult\n    };\n    this._unknownHandler = unknown;\n    this._invalidHandler = invalid;\n    this._deprecatedHandler = deprecated;\n    this.cleanHistory();\n  }\n\n  _createClass(Normalizer, [{\n    key: \"cleanHistory\",\n    value: function cleanHistory() {\n      this._hasDeprecationWarned = utils_1.createAutoChecklist();\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(options) {\n      var _this = this;\n\n      var normalized = {};\n      var restOptionsArray = [options];\n\n      var applyNormalization = function applyNormalization() {\n        while (restOptionsArray.length !== 0) {\n          var currentOptions = restOptionsArray.shift();\n\n          var transferredOptionsArray = _this._applyNormalization(currentOptions, normalized);\n\n          restOptionsArray.push.apply(restOptionsArray, _toConsumableArray(transferredOptionsArray));\n        }\n      };\n\n      applyNormalization();\n\n      for (var _i = 0, _Object$keys = Object.keys(this._utils.schemas); _i < _Object$keys.length; _i++) {\n        var key = _Object$keys[_i];\n        var schema = this._utils.schemas[key];\n\n        if (!(key in normalized)) {\n          var defaultResult = utils_1.normalizeDefaultResult(schema.default(this._utils));\n\n          if ('value' in defaultResult) {\n            restOptionsArray.push(_defineProperty({}, key, defaultResult.value));\n          }\n        }\n      }\n\n      applyNormalization();\n\n      for (var _i2 = 0, _Object$keys2 = Object.keys(this._utils.schemas); _i2 < _Object$keys2.length; _i2++) {\n        var _key = _Object$keys2[_i2];\n        var _schema = this._utils.schemas[_key];\n\n        if (_key in normalized) {\n          normalized[_key] = _schema.postprocess(normalized[_key], this._utils);\n        }\n      }\n\n      return normalized;\n    }\n  }, {\n    key: \"_applyNormalization\",\n    value: function _applyNormalization(options, normalized) {\n      var _this2 = this;\n\n      var transferredOptionsArray = [];\n\n      var _utils_1$partition = utils_1.partition(Object.keys(options), function (key) {\n        return key in _this2._utils.schemas;\n      }),\n          _utils_1$partition2 = _slicedToArray(_utils_1$partition, 2),\n          knownOptionNames = _utils_1$partition2[0],\n          unknownOptionNames = _utils_1$partition2[1];\n\n      var _iterator = _createForOfIteratorHelper(knownOptionNames),\n          _step;\n\n      try {\n        var _loop = function _loop() {\n          var key = _step.value;\n          var schema = _this2._utils.schemas[key];\n          var value = schema.preprocess(options[key], _this2._utils);\n          var validateResult = utils_1.normalizeValidateResult(schema.validate(value, _this2._utils), value);\n\n          if (validateResult !== true) {\n            var invalidValue = validateResult.value;\n\n            var errorMessageOrError = _this2._invalidHandler(key, invalidValue, _this2._utils);\n\n            throw typeof errorMessageOrError === 'string' ? new Error(errorMessageOrError) :\n            /* istanbul ignore next*/\n            errorMessageOrError;\n          }\n\n          var appendTransferredOptions = function appendTransferredOptions(_ref2) {\n            var from = _ref2.from,\n                to = _ref2.to;\n            transferredOptionsArray.push(typeof to === 'string' ? _defineProperty({}, to, from) : _defineProperty({}, to.key, to.value));\n          };\n\n          var warnDeprecated = function warnDeprecated(_ref5) {\n            var currentValue = _ref5.value,\n                redirectTo = _ref5.redirectTo;\n            var deprecatedResult = utils_1.normalizeDeprecatedResult(schema.deprecated(currentValue, _this2._utils), value,\n            /* doNotNormalizeTrue */\n            true);\n\n            if (deprecatedResult === false) {\n              return;\n            }\n\n            if (deprecatedResult === true) {\n              if (!_this2._hasDeprecationWarned(key)) {\n                _this2._utils.logger.warn(_this2._deprecatedHandler(key, redirectTo, _this2._utils));\n              }\n            } else {\n              var _iterator3 = _createForOfIteratorHelper(deprecatedResult),\n                  _step3;\n\n              try {\n                for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                  var deprecatedValue = _step3.value.value;\n                  var pair = {\n                    key: key,\n                    value: deprecatedValue\n                  };\n\n                  if (!_this2._hasDeprecationWarned(pair)) {\n                    var redirectToPair = typeof redirectTo === 'string' ? {\n                      key: redirectTo,\n                      value: deprecatedValue\n                    } : redirectTo;\n\n                    _this2._utils.logger.warn(_this2._deprecatedHandler(pair, redirectToPair, _this2._utils));\n                  }\n                }\n              } catch (err) {\n                _iterator3.e(err);\n              } finally {\n                _iterator3.f();\n              }\n            }\n          };\n\n          var forwardResult = utils_1.normalizeForwardResult(schema.forward(value, _this2._utils), value);\n          forwardResult.forEach(appendTransferredOptions);\n          var redirectResult = utils_1.normalizeRedirectResult(schema.redirect(value, _this2._utils), value);\n          redirectResult.redirect.forEach(appendTransferredOptions);\n\n          if ('remain' in redirectResult) {\n            var remainingValue = redirectResult.remain;\n            normalized[key] = key in normalized ? schema.overlap(normalized[key], remainingValue, _this2._utils) : remainingValue;\n            warnDeprecated({\n              value: remainingValue\n            });\n          }\n\n          var _iterator4 = _createForOfIteratorHelper(redirectResult.redirect),\n              _step4;\n\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _step4$value = _step4.value,\n                  from = _step4$value.from,\n                  to = _step4$value.to;\n              warnDeprecated({\n                value: from,\n                redirectTo: to\n              });\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n        };\n\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          _loop();\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(unknownOptionNames),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var key = _step2.value;\n          var value = options[key];\n\n          var unknownResult = this._unknownHandler(key, value, this._utils);\n\n          if (unknownResult) {\n            for (var _i3 = 0, _Object$keys3 = Object.keys(unknownResult); _i3 < _Object$keys3.length; _i3++) {\n              var unknownKey = _Object$keys3[_i3];\n\n              var unknownOption = _defineProperty({}, unknownKey, unknownResult[unknownKey]);\n\n              if (unknownKey in this._utils.schemas) {\n                transferredOptionsArray.push(unknownOption);\n              } else {\n                Object.assign(normalized, unknownOption);\n              }\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return transferredOptionsArray;\n    }\n  }]);\n\n  return Normalizer;\n}();\n\nexports.Normalizer = Normalizer;","map":null,"metadata":{},"sourceType":"script"}