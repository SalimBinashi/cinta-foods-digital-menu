{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(normalizeFile);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  var data = require(\"fs\");\n\n  _fs = function _fs() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  var data = require(\"path\");\n\n  _path = function _path() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  var data = require(\"debug\");\n\n  _debug = function _debug() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction t() {\n  var data = require(\"@babel/types\");\n\n  t = function t() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  var data = require(\"convert-source-map\");\n\n  _convertSourceMap = function _convertSourceMap() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"./file/file\");\n\nvar _parser = require(\"../parser\");\n\nvar _cloneDeep = require(\"./util/clone-deep\");\n\nvar debug = _debug()(\"babel:transform:file\");\n\nvar LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction normalizeFile(pluginPasses, options, code, ast) {\n  var inputMap, lastComment, _lastComment, match, inputMapContent;\n\n  return _regeneratorRuntime.wrap(function normalizeFile$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          code = \"\".concat(code || \"\");\n\n          if (!ast) {\n            _context.next = 11;\n            break;\n          }\n\n          if (!(ast.type === \"Program\")) {\n            _context.next = 6;\n            break;\n          }\n\n          ast = t().file(ast, [], []);\n          _context.next = 8;\n          break;\n\n        case 6:\n          if (!(ast.type !== \"File\")) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error(\"AST root must be a Program or File node\");\n\n        case 8:\n          if (options.cloneInputAst) {\n            ast = (0, _cloneDeep.default)(ast);\n          }\n\n          _context.next = 13;\n          break;\n\n        case 11:\n          return _context.delegateYield((0, _parser.default)(pluginPasses, options, code), \"t0\", 12);\n\n        case 12:\n          ast = _context.t0;\n\n        case 13:\n          inputMap = null;\n\n          if (options.inputSourceMap !== false) {\n            if (typeof options.inputSourceMap === \"object\") {\n              inputMap = _convertSourceMap().fromObject(options.inputSourceMap);\n            }\n\n            if (!inputMap) {\n              lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n              if (lastComment) {\n                try {\n                  inputMap = _convertSourceMap().fromComment(lastComment);\n                } catch (err) {\n                  debug(\"discarding unknown inline input sourcemap\", err);\n                }\n              }\n            }\n\n            if (!inputMap) {\n              _lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n              if (typeof options.filename === \"string\" && _lastComment) {\n                try {\n                  match = EXTERNAL_SOURCEMAP_REGEX.exec(_lastComment);\n                  inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));\n\n                  if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n                    debug(\"skip merging input map > 1 MB\");\n                  } else {\n                    inputMap = _convertSourceMap().fromJSON(inputMapContent);\n                  }\n                } catch (err) {\n                  debug(\"discarding unknown file input sourcemap\", err);\n                }\n              } else if (_lastComment) {\n                debug(\"discarding un-loadable file input sourcemap\");\n              }\n            }\n          }\n\n          return _context.abrupt(\"return\", new _file.default(options, {\n            code: code,\n            ast: ast,\n            inputMap: inputMap\n          }));\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nvar INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nvar EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(function (_ref) {\n      var value = _ref.value;\n\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  var lastComment = null;\n  t().traverseFast(ast, function (node) {\n    var _extractCommentsFromL = extractCommentsFromList(regex, node.leadingComments, lastComment);\n\n    var _extractCommentsFromL2 = _slicedToArray(_extractCommentsFromL, 2);\n\n    node.leadingComments = _extractCommentsFromL2[0];\n    lastComment = _extractCommentsFromL2[1];\n\n    var _extractCommentsFromL3 = extractCommentsFromList(regex, node.innerComments, lastComment);\n\n    var _extractCommentsFromL4 = _slicedToArray(_extractCommentsFromL3, 2);\n\n    node.innerComments = _extractCommentsFromL4[0];\n    lastComment = _extractCommentsFromL4[1];\n\n    var _extractCommentsFromL5 = extractCommentsFromList(regex, node.trailingComments, lastComment);\n\n    var _extractCommentsFromL6 = _slicedToArray(_extractCommentsFromL5, 2);\n\n    node.trailingComments = _extractCommentsFromL6[0];\n    lastComment = _extractCommentsFromL6[1];\n  });\n  return lastComment;\n}","map":null,"metadata":{},"sourceType":"script"}