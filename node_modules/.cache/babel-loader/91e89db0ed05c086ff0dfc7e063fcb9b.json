{"ast":null,"code":"// todo: syntax checking\n// todo: test handle args\nvar depthSplit = require('./depth-split');\n\nmodule.exports = function (query, shouldAssignParamIds) {\n  if (!query) return [];\n  var result = [],\n      prevChar,\n      char,\n      nextChar = query.charAt(0),\n      bStart = 0,\n      bEnd = 0,\n      partOffset = 0,\n      pos = 0,\n      depth = 0,\n      mode = 'get',\n      deepQuery = null; // if query contains params then number them\n\n  if (shouldAssignParamIds) {\n    query = assignParamIds(query);\n  }\n\n  var tokens = {\n    '.': {\n      mode: 'get'\n    },\n    ':': {\n      mode: 'filter'\n    },\n    '|': {\n      handle: 'or'\n    },\n    '[': {\n      open: 'select'\n    },\n    ']': {\n      close: 'select'\n    },\n    '{': {\n      open: 'meta'\n    },\n    '}': {\n      close: 'meta'\n    },\n    '(': {\n      open: 'args'\n    },\n    ')': {\n      close: 'args'\n    }\n  };\n\n  function push(item) {\n    if (deepQuery) {\n      deepQuery.push(item);\n    } else {\n      result.push(item);\n    }\n  }\n\n  var handlers = {\n    get: function get(buffer) {\n      var trimmed = typeof buffer === 'string' ? buffer.trim() : null;\n\n      if (trimmed) {\n        push({\n          get: trimmed\n        });\n      }\n    },\n    select: function select(buffer) {\n      if (buffer) {\n        push(tokenizeSelect(buffer));\n      } else {\n        // deep query override\n        var x = {\n          deep: []\n        };\n        result.push(x);\n        deepQuery = x.deep;\n      }\n    },\n    filter: function filter(buffer) {\n      if (buffer) {\n        push({\n          filter: buffer.trim()\n        });\n      }\n    },\n    or: function or() {\n      deepQuery = null;\n      result.push({\n        or: true\n      });\n      partOffset = i + 1;\n    },\n    args: function args(buffer) {\n      var args = tokenizeArgs(buffer);\n      result[result.length - 1].args = args;\n    }\n  };\n\n  function handleBuffer() {\n    var buffer = query.slice(bStart, bEnd);\n\n    if (handlers[mode]) {\n      handlers[mode](buffer);\n    }\n\n    mode = 'get';\n    bStart = bEnd + 1;\n  }\n\n  for (var i = 0; i < query.length; i++) {\n    // update char values\n    prevChar = char;\n    char = nextChar;\n    nextChar = query.charAt(i + 1);\n    pos = i - partOffset; // root query check\n\n    if (pos === 0 && char !== ':' && char !== '.') {\n      result.push({\n        root: true\n      });\n    } // parent query check\n\n\n    if (pos === 0 && char === '.' && nextChar === '.') {\n      result.push({\n        parent: true\n      });\n    }\n\n    var token = tokens[char];\n\n    if (token) {\n      // set mode\n      if (depth === 0 && (token.mode || token.open)) {\n        handleBuffer();\n        mode = token.mode || token.open;\n      }\n\n      if (depth === 0 && token.handle) {\n        handleBuffer();\n        handlers[token.handle]();\n      }\n\n      if (token.open) {\n        depth += 1;\n      } else if (token.close) {\n        depth -= 1;\n      } // reset mode to get\n\n\n      if (depth === 0 && token.close) {\n        handleBuffer();\n      }\n    }\n\n    bEnd = i + 1;\n  }\n\n  handleBuffer();\n  return result;\n};\n\nfunction tokenizeArgs(argsQuery) {\n  if (argsQuery === ',') return [','];\n  return depthSplit(argsQuery, /,/).map(function (s) {\n    return handleSelectPart(s.trim());\n  });\n}\n\nfunction tokenizeSelect(selectQuery) {\n  if (selectQuery === '*') {\n    return {\n      values: true\n    };\n  } else if (selectQuery === '**') {\n    return {\n      values: true,\n      deep: true\n    };\n  }\n\n  var multiple = false;\n\n  if (selectQuery.charAt(0) === '*') {\n    multiple = true;\n    selectQuery = selectQuery.slice(1);\n  }\n\n  var booleanParts = depthSplit(selectQuery, /&|\\|/, {\n    includeDelimiters: true\n  });\n\n  if (booleanParts.length > 1) {\n    var result = [getSelectPart(booleanParts[0].trim())];\n\n    for (var i = 1; i < booleanParts.length; i += 2) {\n      var part = getSelectPart(booleanParts[i + 1].trim());\n\n      if (part) {\n        part.booleanOp = booleanParts[i];\n        result.push(part);\n      }\n    }\n\n    return {\n      multiple: multiple,\n      boolean: true,\n      select: result\n    };\n  } else {\n    var result = getSelectPart(selectQuery.trim());\n\n    if (!result) {\n      return {\n        get: handleSelectPart(selectQuery.trim())\n      };\n    } else {\n      if (multiple) {\n        result.multiple = true;\n      }\n\n      return result;\n    }\n  }\n}\n\nfunction getSelectPart(selectQuery) {\n  var parts = depthSplit(selectQuery, /(!)?(=|~|\\:|<=|>=|<|>)/, {\n    max: 2,\n    includeDelimiters: true\n  });\n\n  if (parts.length === 3) {\n    var negate = parts[1].charAt(0) === '!';\n    var key = handleSelectPart(parts[0].trim());\n    var result = {\n      negate: negate,\n      op: negate ? parts[1].slice(1) : parts[1]\n    };\n\n    if (result.op === ':') {\n      result.select = [key, {\n        _sub: module.exports(':' + parts[2].trim())\n      }];\n    } else if (result.op === '~') {\n      var value = handleSelectPart(parts[2].trim());\n\n      if (typeof value === 'string') {\n        var reDef = parts[2].trim().match(/^\\/(.*)\\/([a-z]?)$/);\n\n        if (reDef) {\n          result.select = [key, new RegExp(reDef[1], reDef[2])];\n        } else {\n          result.select = [key, value];\n        }\n      } else {\n        result.select = [key, value];\n      }\n    } else {\n      result.select = [key, handleSelectPart(parts[2].trim())];\n    }\n\n    return result;\n  }\n}\n\nfunction isInnerQuery(text) {\n  return text.charAt(0) === '{' && text.charAt(text.length - 1) === '}';\n}\n\nfunction handleSelectPart(part) {\n  if (isInnerQuery(part)) {\n    var innerQuery = part.slice(1, -1);\n    return {\n      _sub: module.exports(innerQuery)\n    };\n  } else {\n    return paramToken(part);\n  }\n}\n\nfunction paramToken(text) {\n  if (text.charAt(0) === '?') {\n    var num = parseInt(text.slice(1));\n\n    if (!isNaN(num)) {\n      return {\n        _param: num\n      };\n    } else {\n      return text;\n    }\n  } else {\n    return text;\n  }\n}\n\nfunction assignParamIds(query) {\n  var index = 0;\n  return query.replace(/\\?/g, function (match) {\n    return match + index++;\n  });\n}\n\nfunction last(array) {\n  return array[array.length - 1];\n}","map":null,"metadata":{},"sourceType":"script"}