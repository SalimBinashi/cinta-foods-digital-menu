{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = simplifyAccess;\n\nvar t = require(\"@babel/types\");\n\nfunction simplifyAccess(path, bindingNames) {\n  path.traverse(simpleAssignmentVisitor, {\n    scope: path.scope,\n    bindingNames: bindingNames,\n    seen: new WeakSet()\n  });\n}\n\nvar simpleAssignmentVisitor = {\n  UpdateExpression: {\n    exit: function exit(path) {\n      var scope = this.scope,\n          bindingNames = this.bindingNames;\n      var arg = path.get(\"argument\");\n      if (!arg.isIdentifier()) return;\n      var localName = arg.node.name;\n      if (!bindingNames.has(localName)) return;\n\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord()) {\n        var operator = path.node.operator == \"++\" ? \"+=\" : \"-=\";\n        path.replaceWith(t.assignmentExpression(operator, arg.node, t.numericLiteral(1)));\n      } else if (path.node.prefix) {\n        path.replaceWith(t.assignmentExpression(\"=\", t.identifier(localName), t.binaryExpression(path.node.operator[0], t.unaryExpression(\"+\", arg.node), t.numericLiteral(1))));\n      } else {\n        var old = path.scope.generateUidIdentifierBasedOnNode(arg.node, \"old\");\n        var varName = old.name;\n        path.scope.push({\n          id: old\n        });\n        var binary = t.binaryExpression(path.node.operator[0], t.identifier(varName), t.numericLiteral(1));\n        path.replaceWith(t.sequenceExpression([t.assignmentExpression(\"=\", t.identifier(varName), t.unaryExpression(\"+\", arg.node)), t.assignmentExpression(\"=\", t.cloneNode(arg.node), binary), t.identifier(varName)]));\n      }\n    }\n  },\n  AssignmentExpression: {\n    exit: function exit(path) {\n      var scope = this.scope,\n          seen = this.seen,\n          bindingNames = this.bindingNames;\n      if (path.node.operator === \"=\") return;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      var left = path.get(\"left\");\n      if (!left.isIdentifier()) return;\n      var localName = left.node.name;\n      if (!bindingNames.has(localName)) return;\n\n      if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n        return;\n      }\n\n      var operator = path.node.operator.slice(0, -1);\n\n      if (t.LOGICAL_OPERATORS.includes(operator)) {\n        path.replaceWith(t.logicalExpression(operator, path.node.left, t.assignmentExpression(\"=\", t.cloneNode(path.node.left), path.node.right)));\n      } else {\n        path.node.right = t.binaryExpression(operator, t.cloneNode(path.node.left), path.node.right);\n        path.node.operator = \"=\";\n      }\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}