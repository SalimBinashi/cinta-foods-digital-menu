{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helperPluginUtils = require(\"@babel/helper-plugin-utils\");\n\nvar _path = require(\"path\");\n\nvar _core = require(\"@babel/core\");\n\nvar _default = (0, _helperPluginUtils.declare)(function (api) {\n  api.assertVersion(7);\n\n  function addDisplayName(id, call) {\n    var props = call.arguments[0].properties;\n    var safe = true;\n\n    for (var i = 0; i < props.length; i++) {\n      var prop = props[i];\n\n      var key = _core.types.toComputedKey(prop);\n\n      if (_core.types.isLiteral(key, {\n        value: \"displayName\"\n      })) {\n        safe = false;\n        break;\n      }\n    }\n\n    if (safe) {\n      props.unshift(_core.types.objectProperty(_core.types.identifier(\"displayName\"), _core.types.stringLiteral(id)));\n    }\n  }\n\n  var isCreateClassCallExpression = _core.types.buildMatchMemberExpression(\"React.createClass\");\n\n  var isCreateClassAddon = function isCreateClassAddon(callee) {\n    return callee.name === \"createReactClass\";\n  };\n\n  function isCreateClass(node) {\n    if (!node || !_core.types.isCallExpression(node)) return false;\n\n    if (!isCreateClassCallExpression(node.callee) && !isCreateClassAddon(node.callee)) {\n      return false;\n    }\n\n    var args = node.arguments;\n    if (args.length !== 1) return false;\n    var first = args[0];\n    if (!_core.types.isObjectExpression(first)) return false;\n    return true;\n  }\n\n  return {\n    name: \"transform-react-display-name\",\n    visitor: {\n      ExportDefaultDeclaration: function ExportDefaultDeclaration(_ref, state) {\n        var node = _ref.node;\n\n        if (isCreateClass(node.declaration)) {\n          var filename = state.filename || \"unknown\";\n\n          var displayName = _path.basename(filename, _path.extname(filename));\n\n          if (displayName === \"index\") {\n            displayName = _path.basename(_path.dirname(filename));\n          }\n\n          addDisplayName(displayName, node.declaration);\n        }\n      },\n      CallExpression: function CallExpression(path) {\n        var node = path.node;\n        if (!isCreateClass(node)) return;\n        var id;\n        path.find(function (path) {\n          if (path.isAssignmentExpression()) {\n            id = path.node.left;\n          } else if (path.isObjectProperty()) {\n            id = path.node.key;\n          } else if (path.isVariableDeclarator()) {\n            id = path.node.id;\n          } else if (path.isStatement()) {\n            return true;\n          }\n\n          if (id) return true;\n        });\n        if (!id) return;\n\n        if (_core.types.isMemberExpression(id)) {\n          id = id.property;\n        }\n\n        if (_core.types.isIdentifier(id)) {\n          addDisplayName(id.name, node);\n        }\n      }\n    }\n  };\n});\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}