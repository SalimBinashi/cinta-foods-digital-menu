{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar Config = {\n  useBrowserStorage: false,\n  timeout: 0\n};\nvar Helper = {\n  access: new Date(),\n  expired: function expired(storage) {\n    var expireMinute = Math.round((new Date() - Helper.access) / 60000);\n\n    if (expireMinute > Config.timeout && Config.timeout !== 0) {\n      console.warn(\"Session expired!\", storage);\n      storage.clear();\n    }\n\n    Helper.access = new Date();\n  }\n};\n\nvar Storage = function Storage() {\n  try {\n    if (!Config.useBrowserStorage) throw new Error();\n    var key = \"jcfOnRWMIvigArtNb1z3hj6yQ2xlZGiD\";\n    sessionStorage.setItem(key, key);\n    sessionStorage.removeItem(key);\n    return sessionStorage;\n  } catch (e) {\n    var _SessionStorage = {};\n    Object.defineProperty(_SessionStorage, \"length\", {\n      get: function get() {\n        return Object.keys(this).length;\n      },\n      enumerable: false,\n      __proto__: null\n    });\n    Object.setPrototypeOf(_SessionStorage, {\n      setItem: function setItem(key, value) {\n        _SessionStorage[key] = value;\n      },\n      getItem: function getItem(key) {\n        return _SessionStorage[key];\n      },\n      removeItem: function removeItem(key) {\n        delete _SessionStorage[key];\n      },\n      clear: function clear() {\n        _SessionStorage = {};\n      }\n    });\n    return _SessionStorage;\n  }\n};\n\nvar SessionStorage = /*#__PURE__*/function () {\n  function SessionStorage() {\n    _classCallCheck(this, SessionStorage);\n\n    this.Storage = Storage();\n    this.Callback = [];\n  }\n  /**\r\n   * @param {boolean} browserStorage Use browser sessionStorage.\r\n   * @param {number} timeout Session timeout period, in minutes.\r\n   */\n\n\n  _createClass(SessionStorage, [{\n    key: \"config\",\n    value: function config() {\n      var browserStorage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      Config.useBrowserStorage = browserStorage;\n      Config.timeout = timeout;\n      this.Storage = Storage();\n    }\n    /**\r\n    * @return {Array<Object>} Return session items.\r\n    */\n\n  }, {\n    key: \"items\",\n    value: function items() {\n      var _this = this;\n\n      Helper.expired(this.Storage);\n      var sessionData = {};\n      Object.keys(this.Storage).forEach(function (item) {\n        sessionData[item] = _this.Storage.getItem(item);\n      });\n      return sessionData;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.Storage.clear();\n    }\n    /**\r\n     * @param {string} key Session item key.\r\n     * @param {Object|string} value Session item value. If you are using browser storage, it can only take {:string}.\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      Helper.expired(this.Storage);\n      this.Storage.setItem(key, value);\n      var data = this.items();\n      this.Callback.forEach(function (func) {\n        func(data);\n      });\n    }\n    /**\r\n    * @param {string} key Session item key.\r\n    * @return {Object} Session item value. If you are using browser storage, it can return {:string}.\r\n    */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      Helper.expired(this.Storage);\n      return this.Storage.getItem(key);\n    }\n    /**\r\n    * @param {string} key Session item key.\r\n    */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key) {\n      return this.Storage.removeItem(key);\n    }\n    /**\r\n    * @param {func} callback Triggered when session items set.\r\n    */\n\n  }, {\n    key: \"onSet\",\n    value: function onSet(callback) {\n      var filter = this.Callback.filter(function (f) {\n        return f.name === callback.name;\n      });\n\n      if (filter.length === 0) {\n        callback(this.items());\n        this.Callback.push(callback);\n      }\n    }\n    /**\r\n    * @param {string} callbackName Callback function key.\r\n    */\n\n  }, {\n    key: \"unmount\",\n    value: function unmount(callbackName) {\n      this.Callback = this.Callback.filter(function (f) {\n        return f.name !== callbackName;\n      });\n    }\n  }]);\n\n  return SessionStorage;\n}();\n\nvar Session = new SessionStorage();\nvar _default = Session;\nexports[\"default\"] = _default;","map":null,"metadata":{},"sourceType":"script"}