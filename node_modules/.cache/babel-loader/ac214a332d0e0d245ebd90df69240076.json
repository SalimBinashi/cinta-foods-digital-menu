{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction recordFromArray(array, mainKey) {\n  var record = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(array),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      var key = value[mainKey]; // istanbul ignore next\n\n      if (record[key]) {\n        throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\n      } // @ts-ignore\n\n\n      record[key] = value;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return record;\n}\n\nexports.recordFromArray = recordFromArray;\n\nfunction mapFromArray(array, mainKey) {\n  var map = new Map();\n\n  var _iterator2 = _createForOfIteratorHelper(array),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var value = _step2.value;\n      var key = value[mainKey]; // istanbul ignore next\n\n      if (map.has(key)) {\n        throw new Error(\"Duplicate \".concat(mainKey, \" \").concat(JSON.stringify(key)));\n      }\n\n      map.set(key, value);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return map;\n}\n\nexports.mapFromArray = mapFromArray;\n\nfunction createAutoChecklist() {\n  var map = Object.create(null);\n  return function (id) {\n    var idString = JSON.stringify(id);\n\n    if (map[idString]) {\n      return true;\n    }\n\n    map[idString] = true;\n    return false;\n  };\n}\n\nexports.createAutoChecklist = createAutoChecklist;\n\nfunction partition(array, predicate) {\n  var trueArray = [];\n  var falseArray = [];\n\n  var _iterator3 = _createForOfIteratorHelper(array),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var value = _step3.value;\n\n      if (predicate(value)) {\n        trueArray.push(value);\n      } else {\n        falseArray.push(value);\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return [trueArray, falseArray];\n}\n\nexports.partition = partition;\n\nfunction isInt(value) {\n  return value === Math.floor(value);\n}\n\nexports.isInt = isInt;\n\nfunction comparePrimitive(a, b) {\n  if (a === b) {\n    return 0;\n  }\n\n  var typeofA = typeof a;\n  var typeofB = typeof b;\n  var orders = ['undefined', 'object', 'boolean', 'number', 'string'];\n\n  if (typeofA !== typeofB) {\n    return orders.indexOf(typeofA) - orders.indexOf(typeofB);\n  }\n\n  if (typeofA !== 'string') {\n    return Number(a) - Number(b);\n  }\n\n  return a.localeCompare(b);\n}\n\nexports.comparePrimitive = comparePrimitive;\n\nfunction normalizeDefaultResult(result) {\n  return result === undefined ? {} : result;\n}\n\nexports.normalizeDefaultResult = normalizeDefaultResult;\n\nfunction normalizeValidateResult(result, value) {\n  return result === true ? true : result === false ? {\n    value: value\n  } : result;\n}\n\nexports.normalizeValidateResult = normalizeValidateResult;\n\nfunction normalizeDeprecatedResult(result, value) {\n  var doNotNormalizeTrue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return result === false ? false : result === true ? doNotNormalizeTrue ? true : [{\n    value: value\n  }] : 'value' in result ? [result] : result.length === 0 ? false : result;\n}\n\nexports.normalizeDeprecatedResult = normalizeDeprecatedResult;\n\nfunction normalizeTransferResult(result, value) {\n  return typeof result === 'string' || 'key' in result ? {\n    from: value,\n    to: result\n  } : 'from' in result ? {\n    from: result.from,\n    to: result.to\n  } : {\n    from: value,\n    to: result.to\n  };\n}\n\nexports.normalizeTransferResult = normalizeTransferResult;\n\nfunction normalizeForwardResult(result, value) {\n  return result === undefined ? [] : Array.isArray(result) ? result.map(function (transferResult) {\n    return normalizeTransferResult(transferResult, value);\n  }) : [normalizeTransferResult(result, value)];\n}\n\nexports.normalizeForwardResult = normalizeForwardResult;\n\nfunction normalizeRedirectResult(result, value) {\n  var redirect = normalizeForwardResult(typeof result === 'object' && 'redirect' in result ? result.redirect : result, value);\n  return redirect.length === 0 ? {\n    remain: value,\n    redirect: redirect\n  } : typeof result === 'object' && 'remain' in result ? {\n    remain: result.remain,\n    redirect: redirect\n  } : {\n    redirect: redirect\n  };\n}\n\nexports.normalizeRedirectResult = normalizeRedirectResult;","map":null,"metadata":{},"sourceType":"script"}