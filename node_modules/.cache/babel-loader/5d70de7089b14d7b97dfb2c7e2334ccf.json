{"ast":null,"code":"\"use strict\"; // These use the global symbol registry so that multiple copies of this\n// library can work together in case they are not deduped.\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar GENSYNC_START = Symbol.for(\"gensync:v1:start\");\nvar GENSYNC_SUSPEND = Symbol.for(\"gensync:v1:suspend\");\nvar GENSYNC_EXPECTED_START = \"GENSYNC_EXPECTED_START\";\nvar GENSYNC_EXPECTED_SUSPEND = \"GENSYNC_EXPECTED_SUSPEND\";\nvar GENSYNC_OPTIONS_ERROR = \"GENSYNC_OPTIONS_ERROR\";\nvar GENSYNC_RACE_NONEMPTY = \"GENSYNC_RACE_NONEMPTY\";\nvar GENSYNC_ERRBACK_NO_CALLBACK = \"GENSYNC_ERRBACK_NO_CALLBACK\";\nmodule.exports = Object.assign(function gensync(optsOrFn) {\n  var genFn = optsOrFn;\n\n  if (typeof optsOrFn !== \"function\") {\n    genFn = newGenerator(optsOrFn);\n  } else {\n    genFn = wrapGenerator(optsOrFn);\n  }\n\n  return Object.assign(genFn, makeFunctionAPI(genFn));\n}, {\n  all: buildOperation({\n    name: \"all\",\n    arity: 1,\n    sync: function sync(args) {\n      var items = Array.from(args[0]);\n      return items.map(function (item) {\n        return evaluateSync(item);\n      });\n    },\n    async: function async(args, resolve, reject) {\n      var items = Array.from(args[0]);\n\n      if (items.length === 0) {\n        Promise.resolve().then(function () {\n          return resolve([]);\n        });\n        return;\n      }\n\n      var count = 0;\n      var results = items.map(function () {\n        return undefined;\n      });\n      items.forEach(function (item, i) {\n        evaluateAsync(item, function (val) {\n          results[i] = val;\n          count += 1;\n          if (count === results.length) resolve(results);\n        }, reject);\n      });\n    }\n  }),\n  race: buildOperation({\n    name: \"race\",\n    arity: 1,\n    sync: function sync(args) {\n      var items = Array.from(args[0]);\n\n      if (items.length === 0) {\n        throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n      }\n\n      return evaluateSync(items[0]);\n    },\n    async: function async(args, resolve, reject) {\n      var items = Array.from(args[0]);\n\n      if (items.length === 0) {\n        throw makeError(\"Must race at least 1 item\", GENSYNC_RACE_NONEMPTY);\n      }\n\n      for (var _i = 0, _items = items; _i < _items.length; _i++) {\n        var item = _items[_i];\n        evaluateAsync(item, resolve, reject);\n      }\n    }\n  })\n});\n/**\n * Given a generator function, return the standard API object that executes\n * the generator and calls the callbacks.\n */\n\nfunction makeFunctionAPI(genFn) {\n  var fns = {\n    sync: function sync() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return evaluateSync(genFn.apply(this, args));\n    },\n    async: function async() {\n      var _this = this;\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      return new Promise(function (resolve, reject) {\n        evaluateAsync(genFn.apply(_this, args), resolve, reject);\n      });\n    },\n    errback: function errback() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      var cb = args.pop();\n\n      if (typeof cb !== \"function\") {\n        throw makeError(\"Asynchronous function called without callback\", GENSYNC_ERRBACK_NO_CALLBACK);\n      }\n\n      var gen;\n\n      try {\n        gen = genFn.apply(this, args);\n      } catch (err) {\n        cb(err);\n        return;\n      }\n\n      evaluateAsync(gen, function (val) {\n        return cb(undefined, val);\n      }, function (err) {\n        return cb(err);\n      });\n    }\n  };\n  return fns;\n}\n\nfunction assertTypeof(type, name, value, allowUndefined) {\n  if (typeof value === type || allowUndefined && typeof value === \"undefined\") {\n    return;\n  }\n\n  var msg;\n\n  if (allowUndefined) {\n    msg = \"Expected opts.\".concat(name, \" to be either a \").concat(type, \", or undefined.\");\n  } else {\n    msg = \"Expected opts.\".concat(name, \" to be a \").concat(type, \".\");\n  }\n\n  throw makeError(msg, GENSYNC_OPTIONS_ERROR);\n}\n\nfunction makeError(msg, code) {\n  return Object.assign(new Error(msg), {\n    code: code\n  });\n}\n/**\n * Given an options object, return a new generator that dispatches the\n * correct handler based on sync or async execution.\n */\n\n\nfunction newGenerator(_ref) {\n  var name = _ref.name,\n      arity = _ref.arity,\n      _sync = _ref.sync,\n      _async = _ref.async,\n      errback = _ref.errback;\n  assertTypeof(\"string\", \"name\", name, true\n  /* allowUndefined */\n  );\n  assertTypeof(\"number\", \"arity\", arity, true\n  /* allowUndefined */\n  );\n  assertTypeof(\"function\", \"sync\", _sync);\n  assertTypeof(\"function\", \"async\", _async, true\n  /* allowUndefined */\n  );\n  assertTypeof(\"function\", \"errback\", errback, true\n  /* allowUndefined */\n  );\n\n  if (_async && errback) {\n    throw makeError(\"Expected one of either opts.async or opts.errback, but got _both_.\", GENSYNC_OPTIONS_ERROR);\n  }\n\n  if (typeof name !== \"string\") {\n    var fnName;\n\n    if (errback && errback.name && errback.name !== \"errback\") {\n      fnName = errback.name;\n    }\n\n    if (_async && _async.name && _async.name !== \"async\") {\n      fnName = _async.name.replace(/Async$/, \"\");\n    }\n\n    if (_sync && _sync.name && _sync.name !== \"sync\") {\n      fnName = _sync.name.replace(/Sync$/, \"\");\n    }\n\n    if (typeof fnName === \"string\") {\n      name = fnName;\n    }\n  }\n\n  if (typeof arity !== \"number\") {\n    arity = _sync.length;\n  }\n\n  return buildOperation({\n    name: name,\n    arity: arity,\n    sync: function sync(args) {\n      return _sync.apply(this, args);\n    },\n    async: function async(args, resolve, reject) {\n      if (_async) {\n        _async.apply(this, args).then(resolve, reject);\n      } else if (errback) {\n        errback.call.apply(errback, [this].concat(_toConsumableArray(args), [function (err, value) {\n          if (err == null) resolve(value);else reject(err);\n        }]));\n      } else {\n        resolve(_sync.apply(this, args));\n      }\n    }\n  });\n}\n\nfunction wrapGenerator(genFn) {\n  return setFunctionMetadata(genFn.name, genFn.length, function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return genFn.apply(this, args);\n  });\n}\n\nfunction buildOperation(_ref2) {\n  var name = _ref2.name,\n      arity = _ref2.arity,\n      sync = _ref2.sync,\n      async = _ref2.async;\n  return setFunctionMetadata(name, arity, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var resume,\n        _len5,\n        args,\n        _key5,\n        res,\n        result,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return GENSYNC_START;\n\n          case 2:\n            resume = _context.sent;\n\n            for (_len5 = _args.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              args[_key5] = _args[_key5];\n            }\n\n            if (resume) {\n              _context.next = 7;\n              break;\n            }\n\n            // Break the tail call to avoid a bug in V8 v6.X with --harmony enabled.\n            res = sync.call(this, args);\n            return _context.abrupt(\"return\", res);\n\n          case 7:\n            try {\n              async.call(this, args, function (value) {\n                if (result) return;\n                result = {\n                  value: value\n                };\n                resume();\n              }, function (err) {\n                if (result) return;\n                result = {\n                  err: err\n                };\n                resume();\n              });\n            } catch (err) {\n              result = {\n                err: err\n              };\n              resume();\n            } // Suspend until the callbacks run. Will resume synchronously if the\n            // callback was already called.\n\n\n            _context.next = 10;\n            return GENSYNC_SUSPEND;\n\n          case 10:\n            if (!result.hasOwnProperty(\"err\")) {\n              _context.next = 12;\n              break;\n            }\n\n            throw result.err;\n\n          case 12:\n            return _context.abrupt(\"return\", result.value);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n}\n\nfunction evaluateSync(gen) {\n  var value;\n\n  while (!(_gen$next = gen.next(), value = _gen$next.value, _gen$next).done) {\n    var _gen$next;\n\n    assertStart(value, gen);\n  }\n\n  return value;\n}\n\nfunction evaluateAsync(gen, resolve, reject) {\n  (function step() {\n    try {\n      var value;\n\n      var _loop = function _loop() {\n        assertStart(value, gen); // If this throws, it is considered to have broken the contract\n        // established for async handlers. If these handlers are called\n        // synchronously, it is also considered bad behavior.\n\n        var sync = true;\n        var didSyncResume = false;\n        var out = gen.next(function () {\n          if (sync) {\n            didSyncResume = true;\n          } else {\n            step();\n          }\n        });\n        sync = false;\n        assertSuspend(out, gen);\n\n        if (!didSyncResume) {\n          // Callback wasn't called synchronously, so break out of the loop\n          // and let it call 'step' later.\n          return {\n            v: void 0\n          };\n        }\n      };\n\n      while (!(_gen$next2 = gen.next(), value = _gen$next2.value, _gen$next2).done) {\n        var _gen$next2;\n\n        var _ret = _loop();\n\n        if (typeof _ret === \"object\") return _ret.v;\n      }\n\n      return resolve(value);\n    } catch (err) {\n      return reject(err);\n    }\n  })();\n}\n\nfunction assertStart(value, gen) {\n  if (value === GENSYNC_START) return;\n  throwError(gen, makeError(\"Got unexpected yielded value in gensync generator: \".concat(JSON.stringify(value), \". Did you perhaps mean to use 'yield*' instead of 'yield'?\"), GENSYNC_EXPECTED_START));\n}\n\nfunction assertSuspend(_ref3, gen) {\n  var value = _ref3.value,\n      done = _ref3.done;\n  if (!done && value === GENSYNC_SUSPEND) return;\n  throwError(gen, makeError(done ? \"Unexpected generator completion. If you get this, it is probably a gensync bug.\" : \"Expected GENSYNC_SUSPEND, got \".concat(JSON.stringify(value), \". If you get this, it is probably a gensync bug.\"), GENSYNC_EXPECTED_SUSPEND));\n}\n\nfunction throwError(gen, err) {\n  // Call `.throw` so that users can step in a debugger to easily see which\n  // 'yield' passed an unexpected value. If the `.throw` call didn't throw\n  // back to the generator, we explicitly do it to stop the error\n  // from being swallowed by user code try/catches.\n  if (gen.throw) gen.throw(err);\n  throw err;\n}\n\nfunction isIterable(value) {\n  return !!value && (typeof value === \"object\" || typeof value === \"function\") && !value[Symbol.iterator];\n}\n\nfunction setFunctionMetadata(name, arity, fn) {\n  if (typeof name === \"string\") {\n    // This should always work on the supported Node versions, but for the\n    // sake of users that are compiling to older versions, we check for\n    // configurability so we don't throw.\n    var nameDesc = Object.getOwnPropertyDescriptor(fn, \"name\");\n\n    if (!nameDesc || nameDesc.configurable) {\n      Object.defineProperty(fn, \"name\", Object.assign(nameDesc || {}, {\n        configurable: true,\n        value: name\n      }));\n    }\n  }\n\n  if (typeof arity === \"number\") {\n    var lengthDesc = Object.getOwnPropertyDescriptor(fn, \"length\");\n\n    if (!lengthDesc || lengthDesc.configurable) {\n      Object.defineProperty(fn, \"length\", Object.assign(lengthDesc || {}, {\n        configurable: true,\n        value: arity\n      }));\n    }\n  }\n\n  return fn;\n}","map":null,"metadata":{},"sourceType":"script"}