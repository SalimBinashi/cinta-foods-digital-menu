{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.declare = declare;\n\nfunction declare(builder) {\n  return function (api, options, dirname) {\n    var _clonedApi2;\n\n    var clonedApi;\n\n    for (var _i = 0, _Object$keys = Object.keys(apiPolyfills); _i < _Object$keys.length; _i++) {\n      var name = _Object$keys[_i];\n\n      var _clonedApi;\n\n      if (api[name]) continue;\n      clonedApi = (_clonedApi = clonedApi) != null ? _clonedApi : copyApiObject(api);\n      clonedApi[name] = apiPolyfills[name](clonedApi);\n    }\n\n    return builder((_clonedApi2 = clonedApi) != null ? _clonedApi2 : api, options || {}, dirname);\n  };\n}\n\nvar apiPolyfills = {\n  assertVersion: function assertVersion(api) {\n    return function (range) {\n      throwVersionError(range, api.version);\n    };\n  },\n  targets: function targets() {\n    return function () {\n      return {};\n    };\n  },\n  assumption: function assumption() {\n    return function () {};\n  }\n};\n\nfunction copyApiObject(api) {\n  var proto = null;\n\n  if (typeof api.version === \"string\" && /^7\\./.test(api.version)) {\n    proto = Object.getPrototypeOf(api);\n\n    if (proto && (!has(proto, \"version\") || !has(proto, \"transform\") || !has(proto, \"template\") || !has(proto, \"types\"))) {\n      proto = null;\n    }\n  }\n\n  return Object.assign({}, proto, api);\n}\n\nfunction has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nfunction throwVersionError(range, version) {\n  if (typeof range === \"number\") {\n    if (!Number.isInteger(range)) {\n      throw new Error(\"Expected string or integer value.\");\n    }\n\n    range = \"^\".concat(range, \".0.0-0\");\n  }\n\n  if (typeof range !== \"string\") {\n    throw new Error(\"Expected string or integer value.\");\n  }\n\n  var limit = Error.stackTraceLimit;\n\n  if (typeof limit === \"number\" && limit < 25) {\n    Error.stackTraceLimit = 25;\n  }\n\n  var err;\n\n  if (version.slice(0, 2) === \"7.\") {\n    err = new Error(\"Requires Babel \\\"^7.0.0-beta.41\\\", but was loaded with \\\"\".concat(version, \"\\\". \") + \"You'll need to update your @babel/core version.\");\n  } else {\n    err = new Error(\"Requires Babel \\\"\".concat(range, \"\\\", but was loaded with \\\"\").concat(version, \"\\\". \") + \"If you are sure you have a compatible version of @babel/core, \" + \"it is likely that something in your build process is loading the \" + \"wrong version. Inspect the stack trace of this error to look for \" + \"the first entry that doesn't mention \\\"@babel/core\\\" or \\\"babel-core\\\" \" + \"to see what is calling Babel.\");\n  }\n\n  if (typeof limit === \"number\") {\n    Error.stackTraceLimit = limit;\n  }\n\n  throw Object.assign(err, {\n    code: \"BABEL_VERSION_UNSUPPORTED\",\n    version: version,\n    range: range\n  });\n}","map":null,"metadata":{},"sourceType":"script"}