{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(parser);\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  var data = require(\"@babel/parser\");\n\n  _parser = function _parser() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  var data = require(\"@babel/code-frame\");\n\n  _codeFrame = function _codeFrame() {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = require(\"./util/missing-plugin-helper\");\n\nfunction parser(pluginPasses, _ref, code) {\n  var parserOpts, _ref$highlightCode, highlightCode, _ref$filename, filename, results, _iterator, _step, plugins, _iterator2, _step2, plugin, parserOverride, ast, loc, missingPlugin, codeFrame;\n\n  return _regeneratorRuntime.wrap(function parser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          parserOpts = _ref.parserOpts, _ref$highlightCode = _ref.highlightCode, highlightCode = _ref$highlightCode === void 0 ? true : _ref$highlightCode, _ref$filename = _ref.filename, filename = _ref$filename === void 0 ? \"unknown\" : _ref$filename;\n          _context.prev = 1;\n          results = [];\n          _iterator = _createForOfIteratorHelper(pluginPasses);\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              plugins = _step.value;\n              _iterator2 = _createForOfIteratorHelper(plugins);\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  plugin = _step2.value;\n                  parserOverride = plugin.parserOverride;\n\n                  if (parserOverride) {\n                    ast = parserOverride(code, parserOpts, _parser().parse);\n                    if (ast !== undefined) results.push(ast);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          if (!(results.length === 0)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"return\", (0, _parser().parse)(code, parserOpts));\n\n        case 9:\n          if (!(results.length === 1)) {\n            _context.next = 14;\n            break;\n          }\n\n          return _context.delegateYield([], \"t0\", 11);\n\n        case 11:\n          if (!(typeof results[0].then === \"function\")) {\n            _context.next = 13;\n            break;\n          }\n\n          throw new Error(\"You appear to be using an async parser plugin, \" + \"which your current version of Babel does not support. \" + \"If you're using a published plugin, you may need to upgrade \" + \"your @babel/core version.\");\n\n        case 13:\n          return _context.abrupt(\"return\", results[0]);\n\n        case 14:\n          throw new Error(\"More than one plugin attempted to override parsing.\");\n\n        case 17:\n          _context.prev = 17;\n          _context.t1 = _context[\"catch\"](1);\n\n          if (_context.t1.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n            _context.t1.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n          }\n\n          loc = _context.t1.loc, missingPlugin = _context.t1.missingPlugin;\n\n          if (loc) {\n            codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n              start: {\n                line: loc.line,\n                column: loc.column + 1\n              }\n            }, {\n              highlightCode: highlightCode\n            });\n\n            if (missingPlugin) {\n              _context.t1.message = \"\".concat(filename, \": \") + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n            } else {\n              _context.t1.message = \"\".concat(filename, \": \").concat(_context.t1.message, \"\\n\\n\") + codeFrame;\n            }\n\n            _context.t1.code = \"BABEL_PARSE_ERROR\";\n          }\n\n          throw _context.t1;\n\n        case 23:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 17]]);\n}","map":null,"metadata":{},"sourceType":"script"}