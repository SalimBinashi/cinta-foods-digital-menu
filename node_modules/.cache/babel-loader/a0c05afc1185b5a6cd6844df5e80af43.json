{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _regeneratorRuntime = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConfigPrinter = exports.ChainFormatter = void 0;\n\nfunction _gensync() {\n  var data = require(\"gensync\");\n\n  _gensync = function _gensync() {\n    return data;\n  };\n\n  return data;\n}\n\nvar ChainFormatter = {\n  Programmatic: 0,\n  Config: 1\n};\nexports.ChainFormatter = ChainFormatter;\nvar Formatter = {\n  title: function title(type, callerName, filepath) {\n    var title = \"\";\n\n    if (type === ChainFormatter.Programmatic) {\n      title = \"programmatic options\";\n\n      if (callerName) {\n        title += \" from \" + callerName;\n      }\n    } else {\n      title = \"config \" + filepath;\n    }\n\n    return title;\n  },\n  loc: function loc(index, envName) {\n    var loc = \"\";\n\n    if (index != null) {\n      loc += \".overrides[\".concat(index, \"]\");\n    }\n\n    if (envName != null) {\n      loc += \".env[\\\"\".concat(envName, \"\\\"]\");\n    }\n\n    return loc;\n  },\n  optionsAndDescriptors: /*#__PURE__*/_regeneratorRuntime.mark(function optionsAndDescriptors(opt) {\n    var content, pluginDescriptors, presetDescriptors;\n    return _regeneratorRuntime.wrap(function optionsAndDescriptors$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            content = Object.assign({}, opt.options);\n            delete content.overrides;\n            delete content.env;\n            _context.t0 = _toConsumableArray;\n            return _context.delegateYield(opt.plugins(), \"t1\", 5);\n\n          case 5:\n            _context.t2 = _context.t1;\n            pluginDescriptors = (0, _context.t0)(_context.t2);\n\n            if (pluginDescriptors.length) {\n              content.plugins = pluginDescriptors.map(function (d) {\n                return descriptorToConfig(d);\n              });\n            }\n\n            _context.t3 = _toConsumableArray;\n            return _context.delegateYield(opt.presets(), \"t4\", 10);\n\n          case 10:\n            _context.t5 = _context.t4;\n            presetDescriptors = (0, _context.t3)(_context.t5);\n\n            if (presetDescriptors.length) {\n              content.presets = _toConsumableArray(presetDescriptors).map(function (d) {\n                return descriptorToConfig(d);\n              });\n            }\n\n            return _context.abrupt(\"return\", JSON.stringify(content, undefined, 2));\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, optionsAndDescriptors);\n  })\n};\n\nfunction descriptorToConfig(d) {\n  var _d$file;\n\n  var name = (_d$file = d.file) == null ? void 0 : _d$file.request;\n\n  if (name == null) {\n    if (typeof d.value === \"object\") {\n      name = d.value;\n    } else if (typeof d.value === \"function\") {\n      name = \"[Function: \".concat(d.value.toString().substr(0, 50), \" ... ]\");\n    }\n  }\n\n  if (name == null) {\n    name = \"[Unknown]\";\n  }\n\n  if (d.options === undefined) {\n    return name;\n  } else if (d.name == null) {\n    return [name, d.options];\n  } else {\n    return [name, d.options, d.name];\n  }\n}\n\nvar ConfigPrinter = /*#__PURE__*/function () {\n  function ConfigPrinter() {\n    _classCallCheck(this, ConfigPrinter);\n\n    this._stack = [];\n  }\n\n  _createClass(ConfigPrinter, [{\n    key: \"configure\",\n    value: function configure(enabled, type, _ref) {\n      var _this = this;\n\n      var callerName = _ref.callerName,\n          filepath = _ref.filepath;\n      if (!enabled) return function () {};\n      return function (content, index, envName) {\n        _this._stack.push({\n          type: type,\n          callerName: callerName,\n          filepath: filepath,\n          content: content,\n          index: index,\n          envName: envName\n        });\n      };\n    }\n  }, {\n    key: \"output\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function output() {\n      var configs;\n      return _regeneratorRuntime.wrap(function output$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(this._stack.length === 0)) {\n                _context2.next = 2;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", \"\");\n\n            case 2:\n              return _context2.delegateYield(_gensync().all(this._stack.map(function (s) {\n                return ConfigPrinter.format(s);\n              })), \"t0\", 3);\n\n            case 3:\n              configs = _context2.t0;\n              return _context2.abrupt(\"return\", configs.join(\"\\n\\n\"));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, output, this);\n    })\n  }], [{\n    key: \"format\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function format(config) {\n      var title, loc, content;\n      return _regeneratorRuntime.wrap(function format$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              title = Formatter.title(config.type, config.callerName, config.filepath);\n              loc = Formatter.loc(config.index, config.envName);\n              if (loc) title += \" \".concat(loc);\n              return _context3.delegateYield(Formatter.optionsAndDescriptors(config.content), \"t0\", 4);\n\n            case 4:\n              content = _context3.t0;\n              return _context3.abrupt(\"return\", \"\".concat(title, \"\\n\").concat(content));\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, format);\n    })\n  }]);\n\n  return ConfigPrinter;\n}();\n\nexports.ConfigPrinter = ConfigPrinter;","map":null,"metadata":{},"sourceType":"script"}