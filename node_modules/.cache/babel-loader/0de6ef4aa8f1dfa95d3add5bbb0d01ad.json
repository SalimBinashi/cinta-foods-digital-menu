{"ast":null,"code":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar _require = require(\"../common/util\"),\n    getLast = _require.getLast; // fix unexpected locEnd caused by --no-semi style\n\n\nfunction postprocess(ast, options) {\n  visitNode(ast, function (node) {\n    switch (node.type) {\n      case \"VariableDeclaration\":\n        {\n          var lastDeclaration = getLast(node.declarations);\n\n          if (lastDeclaration && lastDeclaration.init) {\n            overrideLocEnd(node, lastDeclaration);\n          }\n\n          break;\n        }\n    }\n  });\n  return ast;\n  /**\n   * - `toOverrideNode` must be the last thing in `toBeOverriddenNode`\n   * - do nothing if there's a semicolon on `toOverrideNode.end` (no need to fix)\n   */\n\n  function overrideLocEnd(toBeOverriddenNode, toOverrideNode) {\n    if (options.originalText[locEnd(toOverrideNode)] === \";\") {\n      return;\n    }\n\n    if (options.parser === \"flow\") {\n      toBeOverriddenNode.range = [toBeOverriddenNode.range[0], toOverrideNode.range[1]];\n    } else {\n      toBeOverriddenNode.end = toOverrideNode.end;\n    }\n\n    toBeOverriddenNode.loc = Object.assign({}, toBeOverriddenNode.loc, {\n      end: toBeOverriddenNode.loc.end\n    });\n  }\n\n  function locEnd(node) {\n    return options.parser === \"flow\" ? node.range[1] : node.end;\n  }\n}\n\nfunction visitNode(node, fn) {\n  if (!node || _typeof(node) !== \"object\") {\n    return;\n  }\n\n  if (Array.isArray(node)) {\n    var _iterator = _createForOfIteratorHelper(node),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var subNode = _step.value;\n        visitNode(subNode, fn);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    return;\n  }\n\n  if (typeof node.type !== \"string\") {\n    return;\n  }\n\n  for (var _i = 0, _Object$keys = Object.keys(node); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    visitNode(node[key], fn);\n  }\n\n  fn(node);\n}\n\nmodule.exports = postprocess;","map":null,"metadata":{},"sourceType":"script"}