{"ast":null,"code":"import _defineProperty from \"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\n/*\nCopyright (c) 2020 Uber Technologies, Inc.\n\nThis source code is licensed under the MIT license found in the\nLICENSE file in the root directory of this source tree.\n*/\nimport { parseCode } from './ast';\nimport { Action, PropTypes } from './const';\nexport var updateCode = function updateCode(dispatch, newCode) {\n  dispatch({\n    type: Action.UpdateCode,\n    payload: newCode\n  });\n};\nexport var updateCodeAndProvider = function updateCodeAndProvider(dispatch, newCode, providerValue) {\n  dispatch({\n    type: Action.UpdateCodeAndProvider,\n    payload: {\n      code: newCode,\n      providerValue: providerValue\n    }\n  });\n};\nexport var updateAll = function updateAll(dispatch, newCode, componentName, propsConfig, parseProvider, customProps) {\n  var propValues = {};\n\n  var _parseCode = parseCode(newCode, componentName, parseProvider),\n      parsedProps = _parseCode.parsedProps,\n      parsedProvider = _parseCode.parsedProvider;\n\n  Object.keys(propsConfig).forEach(function (name) {\n    propValues[name] = propsConfig[name].value;\n\n    if (customProps && customProps[name] && customProps[name].parse) {\n      // custom prop parser\n      propValues[name] = customProps[name].parse(parsedProps[name], propsConfig);\n    } else if (propsConfig[name].type === PropTypes.Date) {\n      var match = parsedProps[name].match(/^new\\s*Date\\(\\s*\"([0-9-T:.Z]+)\"\\s*\\)$/);\n\n      if (match) {\n        propValues[name] = match[1];\n      } else {\n        propValues[name] = parsedProps[name];\n      }\n    } else {\n      propValues[name] = parsedProps[name];\n    }\n  });\n  dispatch({\n    type: Action.Update,\n    payload: {\n      code: newCode,\n      updatedPropValues: propValues,\n      providerValue: parsedProvider\n    }\n  });\n};\nexport var updatePropsAndCodeNoRecompile = function updatePropsAndCodeNoRecompile(dispatch, newCode, propName, propValue) {\n  dispatch({\n    type: Action.UpdatePropsAndCodeNoRecompile,\n    payload: {\n      codeNoRecompile: newCode,\n      updatedPropValues: _defineProperty({}, propName, propValue)\n    }\n  });\n};\nexport var updatePropsAndCode = function updatePropsAndCode(dispatch, newCode, propName, propValue) {\n  dispatch({\n    type: Action.UpdatePropsAndCode,\n    payload: {\n      code: newCode,\n      updatedPropValues: _defineProperty({}, propName, propValue)\n    }\n  });\n};\nexport var updateProps = function updateProps(dispatch, propName, propValue) {\n  dispatch({\n    type: Action.UpdateProps,\n    payload: _defineProperty({}, propName, propValue)\n  });\n};\nexport var reset = function reset(dispatch, initialCode, providerValue, propsConfig) {\n  dispatch({\n    type: Action.Reset,\n    payload: {\n      code: initialCode,\n      props: propsConfig,\n      providerValue: providerValue\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"module"}