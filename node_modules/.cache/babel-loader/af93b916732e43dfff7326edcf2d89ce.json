{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nvar assert = require(\"assert\");\n\nvar _require$builders = require(\"../doc\").builders,\n    concat = _require$builders.concat,\n    hardline = _require$builders.hardline,\n    breakParent = _require$builders.breakParent,\n    indent = _require$builders.indent,\n    lineSuffix = _require$builders.lineSuffix,\n    join = _require$builders.join,\n    cursor = _require$builders.cursor;\n\nvar _require = require(\"../common/util\"),\n    hasNewline = _require.hasNewline,\n    skipNewline = _require.skipNewline,\n    isPreviousLineEmpty = _require.isPreviousLineEmpty;\n\nvar _require2 = require(\"../common/util-shared\"),\n    addLeadingComment = _require2.addLeadingComment,\n    addDanglingComment = _require2.addDanglingComment,\n    addTrailingComment = _require2.addTrailingComment;\n\nvar childNodesCacheKey = Symbol(\"child-nodes\");\n\nfunction getSortedChildNodes(node, options, resultArray) {\n  if (!node) {\n    return;\n  }\n\n  var printer = options.printer,\n      locStart = options.locStart,\n      locEnd = options.locEnd;\n\n  if (resultArray) {\n    if (node && printer.canAttachComment && printer.canAttachComment(node)) {\n      // This reverse insertion sort almost always takes constant\n      // time because we almost always (maybe always?) append the\n      // nodes in order anyway.\n      var i;\n\n      for (i = resultArray.length - 1; i >= 0; --i) {\n        if (locStart(resultArray[i]) <= locStart(node) && locEnd(resultArray[i]) <= locEnd(node)) {\n          break;\n        }\n      }\n\n      resultArray.splice(i + 1, 0, node);\n      return;\n    }\n  } else if (node[childNodesCacheKey]) {\n    return node[childNodesCacheKey];\n  }\n\n  var childNodes;\n\n  if (printer.getCommentChildNodes) {\n    childNodes = printer.getCommentChildNodes(node);\n  } else if (node && _typeof(node) === \"object\") {\n    childNodes = Object.keys(node).filter(function (n) {\n      return n !== \"enclosingNode\" && n !== \"precedingNode\" && n !== \"followingNode\";\n    }).map(function (n) {\n      return node[n];\n    });\n  }\n\n  if (!childNodes) {\n    return;\n  }\n\n  if (!resultArray) {\n    Object.defineProperty(node, childNodesCacheKey, {\n      value: resultArray = [],\n      enumerable: false\n    });\n  }\n\n  childNodes.forEach(function (childNode) {\n    getSortedChildNodes(childNode, options, resultArray);\n  });\n  return resultArray;\n} // As efficiently as possible, decorate the comment object with\n// .precedingNode, .enclosingNode, and/or .followingNode properties, at\n// least one of which is guaranteed to be defined.\n\n\nfunction decorateComment(node, comment, options) {\n  var locStart = options.locStart,\n      locEnd = options.locEnd;\n  var childNodes = getSortedChildNodes(node, options);\n  var precedingNode;\n  var followingNode; // Time to dust off the old binary search robes and wizard hat.\n\n  var left = 0;\n  var right = childNodes.length;\n\n  while (left < right) {\n    var middle = left + right >> 1;\n    var child = childNodes[middle];\n\n    if (locStart(child) - locStart(comment) <= 0 && locEnd(comment) - locEnd(child) <= 0) {\n      // The comment is completely contained by this child node.\n      comment.enclosingNode = child;\n      decorateComment(child, comment, options);\n      return; // Abandon the binary search at this level.\n    }\n\n    if (locEnd(child) - locStart(comment) <= 0) {\n      // This child node falls completely before the comment.\n      // Because we will never consider this node or any nodes\n      // before it again, this node must be the closest preceding\n      // node we have encountered so far.\n      precedingNode = child;\n      left = middle + 1;\n      continue;\n    }\n\n    if (locEnd(comment) - locStart(child) <= 0) {\n      // This child node falls completely after the comment.\n      // Because we will never consider this node or any nodes after\n      // it again, this node must be the closest following node we\n      // have encountered so far.\n      followingNode = child;\n      right = middle;\n      continue;\n    }\n    /* istanbul ignore next */\n\n\n    throw new Error(\"Comment location overlaps with node location\");\n  } // We don't want comments inside of different expressions inside of the same\n  // template literal to move to another expression.\n\n\n  if (comment.enclosingNode && comment.enclosingNode.type === \"TemplateLiteral\") {\n    var quasis = comment.enclosingNode.quasis;\n    var commentIndex = findExpressionIndexForComment(quasis, comment, options);\n\n    if (precedingNode && findExpressionIndexForComment(quasis, precedingNode, options) !== commentIndex) {\n      precedingNode = null;\n    }\n\n    if (followingNode && findExpressionIndexForComment(quasis, followingNode, options) !== commentIndex) {\n      followingNode = null;\n    }\n  }\n\n  if (precedingNode) {\n    comment.precedingNode = precedingNode;\n  }\n\n  if (followingNode) {\n    comment.followingNode = followingNode;\n  }\n}\n\nfunction attach(comments, ast, text, options) {\n  if (!Array.isArray(comments)) {\n    return;\n  }\n\n  var tiesToBreak = [];\n  var locStart = options.locStart,\n      locEnd = options.locEnd;\n  comments.forEach(function (comment, i) {\n    if (options.parser === \"json\" || options.parser === \"json5\" || options.parser === \"__js_expression\" || options.parser === \"__vue_expression\") {\n      if (locStart(comment) - locStart(ast) <= 0) {\n        addLeadingComment(ast, comment);\n        return;\n      }\n\n      if (locEnd(comment) - locEnd(ast) >= 0) {\n        addTrailingComment(ast, comment);\n        return;\n      }\n    }\n\n    decorateComment(ast, comment, options);\n    var precedingNode = comment.precedingNode,\n        enclosingNode = comment.enclosingNode,\n        followingNode = comment.followingNode;\n    var pluginHandleOwnLineComment = options.printer.handleComments && options.printer.handleComments.ownLine ? options.printer.handleComments.ownLine : function () {\n      return false;\n    };\n    var pluginHandleEndOfLineComment = options.printer.handleComments && options.printer.handleComments.endOfLine ? options.printer.handleComments.endOfLine : function () {\n      return false;\n    };\n    var pluginHandleRemainingComment = options.printer.handleComments && options.printer.handleComments.remaining ? options.printer.handleComments.remaining : function () {\n      return false;\n    };\n    var isLastComment = comments.length - 1 === i;\n\n    if (hasNewline(text, locStart(comment), {\n      backwards: true\n    })) {\n      // If a comment exists on its own line, prefer a leading comment.\n      // We also need to check if it's the first line of the file.\n      if (pluginHandleOwnLineComment(comment, text, options, ast, isLastComment)) {// We're good\n      } else if (followingNode) {\n        // Always a leading comment.\n        addLeadingComment(followingNode, comment);\n      } else if (precedingNode) {\n        addTrailingComment(precedingNode, comment);\n      } else if (enclosingNode) {\n        addDanglingComment(enclosingNode, comment);\n      } else {\n        // There are no nodes, let's attach it to the root of the ast\n\n        /* istanbul ignore next */\n        addDanglingComment(ast, comment);\n      }\n    } else if (hasNewline(text, locEnd(comment))) {\n      if (pluginHandleEndOfLineComment(comment, text, options, ast, isLastComment)) {// We're good\n      } else if (precedingNode) {\n        // There is content before this comment on the same line, but\n        // none after it, so prefer a trailing comment of the previous node.\n        addTrailingComment(precedingNode, comment);\n      } else if (followingNode) {\n        addLeadingComment(followingNode, comment);\n      } else if (enclosingNode) {\n        addDanglingComment(enclosingNode, comment);\n      } else {\n        // There are no nodes, let's attach it to the root of the ast\n\n        /* istanbul ignore next */\n        addDanglingComment(ast, comment);\n      }\n    } else {\n      if (pluginHandleRemainingComment(comment, text, options, ast, isLastComment)) {// We're good\n      } else if (precedingNode && followingNode) {\n        // Otherwise, text exists both before and after the comment on\n        // the same line. If there is both a preceding and following\n        // node, use a tie-breaking algorithm to determine if it should\n        // be attached to the next or previous node. In the last case,\n        // simply attach the right node;\n        var tieCount = tiesToBreak.length;\n\n        if (tieCount > 0) {\n          var lastTie = tiesToBreak[tieCount - 1];\n\n          if (lastTie.followingNode !== comment.followingNode) {\n            breakTies(tiesToBreak, text, options);\n          }\n        }\n\n        tiesToBreak.push(comment);\n      } else if (precedingNode) {\n        addTrailingComment(precedingNode, comment);\n      } else if (followingNode) {\n        addLeadingComment(followingNode, comment);\n      } else if (enclosingNode) {\n        addDanglingComment(enclosingNode, comment);\n      } else {\n        // There are no nodes, let's attach it to the root of the ast\n\n        /* istanbul ignore next */\n        addDanglingComment(ast, comment);\n      }\n    }\n  });\n  breakTies(tiesToBreak, text, options);\n  comments.forEach(function (comment) {\n    // These node references were useful for breaking ties, but we\n    // don't need them anymore, and they create cycles in the AST that\n    // may lead to infinite recursion if we don't delete them here.\n    delete comment.precedingNode;\n    delete comment.enclosingNode;\n    delete comment.followingNode;\n  });\n}\n\nfunction breakTies(tiesToBreak, text, options) {\n  var tieCount = tiesToBreak.length;\n\n  if (tieCount === 0) {\n    return;\n  }\n\n  var _tiesToBreak$ = tiesToBreak[0],\n      precedingNode = _tiesToBreak$.precedingNode,\n      followingNode = _tiesToBreak$.followingNode;\n  var gapEndPos = options.locStart(followingNode); // Iterate backwards through tiesToBreak, examining the gaps\n  // between the tied comments. In order to qualify as leading, a\n  // comment must be separated from followingNode by an unbroken series of\n  // gaps (or other comments). Gaps should only contain whitespace or open\n  // parentheses.\n\n  var indexOfFirstLeadingComment;\n\n  for (indexOfFirstLeadingComment = tieCount; indexOfFirstLeadingComment > 0; --indexOfFirstLeadingComment) {\n    var comment = tiesToBreak[indexOfFirstLeadingComment - 1];\n    assert.strictEqual(comment.precedingNode, precedingNode);\n    assert.strictEqual(comment.followingNode, followingNode);\n    var gap = text.slice(options.locEnd(comment), gapEndPos).trim();\n\n    if (gap === \"\" || /^\\(+$/.test(gap)) {\n      gapEndPos = options.locStart(comment);\n    } else {\n      // The gap string contained something other than whitespace or open\n      // parentheses.\n      break;\n    }\n  }\n\n  tiesToBreak.forEach(function (comment, i) {\n    if (i < indexOfFirstLeadingComment) {\n      addTrailingComment(precedingNode, comment);\n    } else {\n      addLeadingComment(followingNode, comment);\n    }\n  });\n  tiesToBreak.length = 0;\n}\n\nfunction printComment(commentPath, options) {\n  var comment = commentPath.getValue();\n  comment.printed = true;\n  return options.printer.printComment(commentPath, options);\n}\n\nfunction findExpressionIndexForComment(quasis, comment, options) {\n  var startPos = options.locStart(comment) - 1;\n\n  for (var i = 1; i < quasis.length; ++i) {\n    if (startPos < getQuasiRange(quasis[i]).start) {\n      return i - 1;\n    }\n  } // We haven't found it, it probably means that some of the locations are off.\n  // Let's just return the first one.\n\n  /* istanbul ignore next */\n\n\n  return 0;\n}\n\nfunction getQuasiRange(expr) {\n  if (expr.start !== undefined) {\n    // Babel\n    return {\n      start: expr.start,\n      end: expr.end\n    };\n  } // Flow\n\n\n  return {\n    start: expr.range[0],\n    end: expr.range[1]\n  };\n}\n\nfunction printLeadingComment(commentPath, print, options) {\n  var comment = commentPath.getValue();\n  var contents = printComment(commentPath, options);\n\n  if (!contents) {\n    return \"\";\n  }\n\n  var isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // Leading block comments should see if they need to stay on the\n  // same line or not.\n\n  if (isBlock) {\n    return concat([contents, hasNewline(options.originalText, options.locEnd(comment)) ? hardline : \" \"]);\n  }\n\n  return concat([contents, hardline]);\n}\n\nfunction printTrailingComment(commentPath, print, options) {\n  var comment = commentPath.getValue();\n  var contents = printComment(commentPath, options);\n\n  if (!contents) {\n    return \"\";\n  }\n\n  var isBlock = options.printer.isBlockComment && options.printer.isBlockComment(comment); // We don't want the line to break\n  // when the parentParentNode is a ClassDeclaration/-Expression\n  // And the parentNode is in the superClass property\n\n  var parentNode = commentPath.getNode(1);\n  var parentParentNode = commentPath.getNode(2);\n  var isParentSuperClass = parentParentNode && (parentParentNode.type === \"ClassDeclaration\" || parentParentNode.type === \"ClassExpression\") && parentParentNode.superClass === parentNode;\n\n  if (hasNewline(options.originalText, options.locStart(comment), {\n    backwards: true\n  })) {\n    // This allows comments at the end of nested structures:\n    // {\n    //   x: 1,\n    //   y: 2\n    //   // A comment\n    // }\n    // Those kinds of comments are almost always leading comments, but\n    // here it doesn't go \"outside\" the block and turns it into a\n    // trailing comment for `2`. We can simulate the above by checking\n    // if this a comment on its own line; normal trailing comments are\n    // always at the end of another expression.\n    var isLineBeforeEmpty = isPreviousLineEmpty(options.originalText, comment, options.locStart);\n    return lineSuffix(concat([hardline, isLineBeforeEmpty ? hardline : \"\", contents]));\n  } else if (isBlock || isParentSuperClass) {\n    // Trailing block comments never need a newline\n    return concat([\" \", contents]);\n  }\n\n  return concat([lineSuffix(concat([\" \", contents])), !isBlock ? breakParent : \"\"]);\n}\n\nfunction printDanglingComments(path, options, sameIndent, filter) {\n  var parts = [];\n  var node = path.getValue();\n\n  if (!node || !node.comments) {\n    return \"\";\n  }\n\n  path.each(function (commentPath) {\n    var comment = commentPath.getValue();\n\n    if (comment && !comment.leading && !comment.trailing && (!filter || filter(comment))) {\n      parts.push(printComment(commentPath, options));\n    }\n  }, \"comments\");\n\n  if (parts.length === 0) {\n    return \"\";\n  }\n\n  if (sameIndent) {\n    return join(hardline, parts);\n  }\n\n  return indent(concat([hardline, join(hardline, parts)]));\n}\n\nfunction prependCursorPlaceholder(path, options, printed) {\n  if (path.getNode() === options.cursorNode && path.getValue()) {\n    return concat([cursor, printed, cursor]);\n  }\n\n  return printed;\n}\n\nfunction printComments(path, print, options, needsSemi) {\n  var value = path.getValue();\n  var printed = print(path);\n  var comments = value && value.comments;\n\n  if (!comments || comments.length === 0) {\n    return prependCursorPlaceholder(path, options, printed);\n  }\n\n  var leadingParts = [];\n  var trailingParts = [needsSemi ? \";\" : \"\", printed];\n  path.each(function (commentPath) {\n    var comment = commentPath.getValue();\n    var leading = comment.leading,\n        trailing = comment.trailing;\n\n    if (leading) {\n      var contents = printLeadingComment(commentPath, print, options);\n\n      if (!contents) {\n        return;\n      }\n\n      leadingParts.push(contents);\n      var text = options.originalText;\n\n      if (hasNewline(text, skipNewline(text, options.locEnd(comment)))) {\n        leadingParts.push(hardline);\n      }\n    } else if (trailing) {\n      trailingParts.push(printTrailingComment(commentPath, print, options));\n    }\n  }, \"comments\");\n  return prependCursorPlaceholder(path, options, concat(leadingParts.concat(trailingParts)));\n}\n\nmodule.exports = {\n  attach: attach,\n  printComments: printComments,\n  printDanglingComments: printDanglingComments,\n  getSortedChildNodes: getSortedChildNodes\n};","map":null,"metadata":{},"sourceType":"script"}