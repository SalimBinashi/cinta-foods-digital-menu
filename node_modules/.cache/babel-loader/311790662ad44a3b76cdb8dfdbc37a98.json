{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _taggedTemplateLiteral = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nvar _createForOfIteratorHelper = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/home/belbet/Project files/cinta-foods-digital-menu/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10, _templateObject11, _templateObject12, _templateObject13;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.rewriteModuleStatementsAndPrepareHeader = rewriteModuleStatementsAndPrepareHeader;\nexports.ensureStatementsHoisted = ensureStatementsHoisted;\nexports.wrapInterop = wrapInterop;\nexports.buildNamespaceInitStatements = buildNamespaceInitStatements;\nObject.defineProperty(exports, \"isModule\", {\n  enumerable: true,\n  get: function get() {\n    return _helperModuleImports.isModule;\n  }\n});\nObject.defineProperty(exports, \"rewriteThis\", {\n  enumerable: true,\n  get: function get() {\n    return _rewriteThis.default;\n  }\n});\nObject.defineProperty(exports, \"hasExports\", {\n  enumerable: true,\n  get: function get() {\n    return _normalizeAndLoadMetadata.hasExports;\n  }\n});\nObject.defineProperty(exports, \"isSideEffectImport\", {\n  enumerable: true,\n  get: function get() {\n    return _normalizeAndLoadMetadata.isSideEffectImport;\n  }\n});\nObject.defineProperty(exports, \"getModuleName\", {\n  enumerable: true,\n  get: function get() {\n    return _getModuleName.default;\n  }\n});\n\nvar _assert = require(\"assert\");\n\nvar t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperModuleImports = require(\"@babel/helper-module-imports\");\n\nvar _rewriteThis = require(\"./rewrite-this\");\n\nvar _rewriteLiveReferences = require(\"./rewrite-live-references\");\n\nvar _normalizeAndLoadMetadata = require(\"./normalize-and-load-metadata\");\n\nvar _getModuleName = require(\"./get-module-name\");\n\nfunction rewriteModuleStatementsAndPrepareHeader(path, _ref) {\n  var loose = _ref.loose,\n      exportName = _ref.exportName,\n      strict = _ref.strict,\n      allowTopLevelThis = _ref.allowTopLevelThis,\n      strictMode = _ref.strictMode,\n      noInterop = _ref.noInterop,\n      _ref$importInterop = _ref.importInterop,\n      importInterop = _ref$importInterop === void 0 ? noInterop ? \"none\" : \"babel\" : _ref$importInterop,\n      lazy = _ref.lazy,\n      esNamespaceOnly = _ref.esNamespaceOnly,\n      _ref$constantReexport = _ref.constantReexports,\n      constantReexports = _ref$constantReexport === void 0 ? loose : _ref$constantReexport,\n      _ref$enumerableModule = _ref.enumerableModuleMeta,\n      enumerableModuleMeta = _ref$enumerableModule === void 0 ? loose : _ref$enumerableModule,\n      noIncompleteNsImportDetection = _ref.noIncompleteNsImportDetection;\n  (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop);\n\n  _assert((0, _helperModuleImports.isModule)(path), \"Cannot process module statements in a script\");\n\n  path.node.sourceType = \"script\";\n  var meta = (0, _normalizeAndLoadMetadata.default)(path, exportName, {\n    importInterop: importInterop,\n    initializeReexports: constantReexports,\n    lazy: lazy,\n    esNamespaceOnly: esNamespaceOnly\n  });\n\n  if (!allowTopLevelThis) {\n    (0, _rewriteThis.default)(path);\n  }\n\n  (0, _rewriteLiveReferences.default)(path, meta);\n\n  if (strictMode !== false) {\n    var hasStrict = path.node.directives.some(function (directive) {\n      return directive.value.value === \"use strict\";\n    });\n\n    if (!hasStrict) {\n      path.unshiftContainer(\"directives\", t.directive(t.directiveLiteral(\"use strict\")));\n    }\n  }\n\n  var headers = [];\n\n  if ((0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict) {\n    headers.push(buildESModuleHeader(meta, enumerableModuleMeta));\n  }\n\n  var nameList = buildExportNameListDeclaration(path, meta);\n\n  if (nameList) {\n    meta.exportNameListName = nameList.name;\n    headers.push(nameList.statement);\n  }\n\n  headers.push.apply(headers, _toConsumableArray(buildExportInitializationStatements(path, meta, constantReexports, noIncompleteNsImportDetection)));\n  return {\n    meta: meta,\n    headers: headers\n  };\n}\n\nfunction ensureStatementsHoisted(statements) {\n  statements.forEach(function (header) {\n    header._blockHoist = 3;\n  });\n}\n\nfunction wrapInterop(programPath, expr, type) {\n  if (type === \"none\") {\n    return null;\n  }\n\n  if (type === \"node-namespace\") {\n    return t.callExpression(programPath.hub.addHelper(\"interopRequireWildcard\"), [expr, t.booleanLiteral(true)]);\n  } else if (type === \"node-default\") {\n    return null;\n  }\n\n  var helper;\n\n  if (type === \"default\") {\n    helper = \"interopRequireDefault\";\n  } else if (type === \"namespace\") {\n    helper = \"interopRequireWildcard\";\n  } else {\n    throw new Error(\"Unknown interop: \".concat(type));\n  }\n\n  return t.callExpression(programPath.hub.addHelper(helper), [expr]);\n}\n\nfunction buildNamespaceInitStatements(metadata, sourceMetadata) {\n  var constantReexports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var statements = [];\n  var srcNamespace = t.identifier(sourceMetadata.name);\n  if (sourceMetadata.lazy) srcNamespace = t.callExpression(srcNamespace, []);\n\n  var _iterator = _createForOfIteratorHelper(sourceMetadata.importsNamespace),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var localName = _step.value;\n      if (localName === sourceMetadata.name) continue;\n      statements.push(_template.default.statement(_templateObject || (_templateObject = _taggedTemplateLiteral([\"var NAME = SOURCE;\"])))({\n        NAME: localName,\n        SOURCE: t.cloneNode(srcNamespace)\n      }));\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (constantReexports) {\n    statements.push.apply(statements, _toConsumableArray(buildReexportsFromMeta(metadata, sourceMetadata, true)));\n  }\n\n  var _iterator2 = _createForOfIteratorHelper(sourceMetadata.reexportNamespace),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var exportName = _step2.value;\n      statements.push((sourceMetadata.lazy ? _template.default.statement(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n            Object.defineProperty(EXPORTS, \\\"NAME\\\", {\\n              enumerable: true,\\n              get: function() {\\n                return NAMESPACE;\\n              }\\n            });\\n          \"]))) : _template.default.statement(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"EXPORTS.NAME = NAMESPACE;\"]))))({\n        EXPORTS: metadata.exportName,\n        NAME: exportName,\n        NAMESPACE: t.cloneNode(srcNamespace)\n      }));\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (sourceMetadata.reexportAll) {\n    var statement = buildNamespaceReexport(metadata, t.cloneNode(srcNamespace), constantReexports);\n    statement.loc = sourceMetadata.reexportAll.loc;\n    statements.push(statement);\n  }\n\n  return statements;\n}\n\nvar ReexportTemplate = {\n  constant: _template.default.statement(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;\"]))),\n  constantComputed: _template.default.statement(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"EXPORTS[\\\"EXPORT_NAME\\\"] = NAMESPACE_IMPORT;\"]))),\n  spec: (0, _template.default)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n    Object.defineProperty(EXPORTS, \\\"EXPORT_NAME\\\", {\\n      enumerable: true,\\n      get: function() {\\n        return NAMESPACE_IMPORT;\\n      },\\n    });\\n    \"])))\n};\n\nvar buildReexportsFromMeta = function buildReexportsFromMeta(meta, metadata, constantReexports) {\n  var namespace = metadata.lazy ? t.callExpression(t.identifier(metadata.name), []) : t.identifier(metadata.name);\n  var stringSpecifiers = meta.stringSpecifiers;\n  return Array.from(metadata.reexports, function (_ref2) {\n    var _ref3 = _slicedToArray(_ref2, 2),\n        exportName = _ref3[0],\n        importName = _ref3[1];\n\n    var NAMESPACE_IMPORT = t.cloneNode(namespace);\n\n    if (importName === \"default\" && metadata.interop === \"node-default\") {} else if (stringSpecifiers.has(importName)) {\n      NAMESPACE_IMPORT = t.memberExpression(NAMESPACE_IMPORT, t.stringLiteral(importName), true);\n    } else {\n      NAMESPACE_IMPORT = t.memberExpression(NAMESPACE_IMPORT, t.identifier(importName));\n    }\n\n    var astNodes = {\n      EXPORTS: meta.exportName,\n      EXPORT_NAME: exportName,\n      NAMESPACE_IMPORT: NAMESPACE_IMPORT\n    };\n\n    if (constantReexports || t.isIdentifier(NAMESPACE_IMPORT)) {\n      if (stringSpecifiers.has(exportName)) {\n        return ReexportTemplate.constantComputed(astNodes);\n      } else {\n        return ReexportTemplate.constant(astNodes);\n      }\n    } else {\n      return ReexportTemplate.spec(astNodes);\n    }\n  });\n};\n\nfunction buildESModuleHeader(metadata) {\n  var enumerableModuleMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (enumerableModuleMeta ? _template.default.statement(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n        EXPORTS.__esModule = true;\\n      \"]))) : _template.default.statement(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n        Object.defineProperty(EXPORTS, \\\"__esModule\\\", {\\n          value: true,\\n        });\\n      \"]))))({\n    EXPORTS: metadata.exportName\n  });\n}\n\nfunction buildNamespaceReexport(metadata, namespace, constantReexports) {\n  return (constantReexports ? _template.default.statement(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n        Object.keys(NAMESPACE).forEach(function(key) {\\n          if (key === \\\"default\\\" || key === \\\"__esModule\\\") return;\\n          VERIFY_NAME_LIST;\\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\\n\\n          EXPORTS[key] = NAMESPACE[key];\\n        });\\n      \"]))) : _template.default.statement(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\\n        Object.keys(NAMESPACE).forEach(function(key) {\\n          if (key === \\\"default\\\" || key === \\\"__esModule\\\") return;\\n          VERIFY_NAME_LIST;\\n          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;\\n\\n          Object.defineProperty(EXPORTS, key, {\\n            enumerable: true,\\n            get: function() {\\n              return NAMESPACE[key];\\n            },\\n          });\\n        });\\n    \"]))))({\n    NAMESPACE: namespace,\n    EXPORTS: metadata.exportName,\n    VERIFY_NAME_LIST: metadata.exportNameListName ? (0, _template.default)(_templateObject11 || (_templateObject11 = _taggedTemplateLiteral([\"\\n            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;\\n          \"])))({\n      EXPORTS_LIST: metadata.exportNameListName\n    }) : null\n  });\n}\n\nfunction buildExportNameListDeclaration(programPath, metadata) {\n  var exportedVars = Object.create(null);\n\n  var _iterator3 = _createForOfIteratorHelper(metadata.local.values()),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var data = _step3.value;\n\n      var _iterator5 = _createForOfIteratorHelper(data.names),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _name = _step5.value;\n          exportedVars[_name] = true;\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var hasReexport = false;\n\n  var _iterator4 = _createForOfIteratorHelper(metadata.source.values()),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var _data = _step4.value;\n\n      var _iterator6 = _createForOfIteratorHelper(_data.reexports.keys()),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var exportName = _step6.value;\n          exportedVars[exportName] = true;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var _iterator7 = _createForOfIteratorHelper(_data.reexportNamespace),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var _exportName = _step7.value;\n          exportedVars[_exportName] = true;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      hasReexport = hasReexport || !!_data.reexportAll;\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  if (!hasReexport || Object.keys(exportedVars).length === 0) return null;\n  var name = programPath.scope.generateUidIdentifier(\"exportNames\");\n  delete exportedVars.default;\n  return {\n    name: name.name,\n    statement: t.variableDeclaration(\"var\", [t.variableDeclarator(name, t.valueToNode(exportedVars))])\n  };\n}\n\nfunction buildExportInitializationStatements(programPath, metadata) {\n  var constantReexports = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var noIncompleteNsImportDetection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var initStatements = [];\n  var exportNames = [];\n\n  var _iterator8 = _createForOfIteratorHelper(metadata.local),\n      _step8;\n\n  try {\n    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n      var _step8$value = _slicedToArray(_step8.value, 2),\n          localName = _step8$value[0],\n          data = _step8$value[1];\n\n      if (data.kind === \"import\") {} else if (data.kind === \"hoisted\") {\n        initStatements.push(buildInitStatement(metadata, data.names, t.identifier(localName)));\n      } else {\n        exportNames.push.apply(exportNames, _toConsumableArray(data.names));\n      }\n    }\n  } catch (err) {\n    _iterator8.e(err);\n  } finally {\n    _iterator8.f();\n  }\n\n  var _iterator9 = _createForOfIteratorHelper(metadata.source.values()),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var _data2 = _step9.value;\n\n      if (!constantReexports) {\n        initStatements.push.apply(initStatements, _toConsumableArray(buildReexportsFromMeta(metadata, _data2, false)));\n      }\n\n      var _iterator10 = _createForOfIteratorHelper(_data2.reexportNamespace),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var exportName = _step10.value;\n          exportNames.push(exportName);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  if (!noIncompleteNsImportDetection) {\n    initStatements.push.apply(initStatements, _toConsumableArray(chunk(exportNames, 100).map(function (members) {\n      return buildInitStatement(metadata, members, programPath.scope.buildUndefinedNode());\n    })));\n  }\n\n  return initStatements;\n}\n\nvar InitTemplate = {\n  computed: _template.default.expression(_templateObject12 || (_templateObject12 = _taggedTemplateLiteral([\"EXPORTS[\\\"NAME\\\"] = VALUE\"]))),\n  default: _template.default.expression(_templateObject13 || (_templateObject13 = _taggedTemplateLiteral([\"EXPORTS.NAME = VALUE\"])))\n};\n\nfunction buildInitStatement(metadata, exportNames, initExpr) {\n  var stringSpecifiers = metadata.stringSpecifiers,\n      EXPORTS = metadata.exportName;\n  return t.expressionStatement(exportNames.reduce(function (acc, exportName) {\n    var params = {\n      EXPORTS: EXPORTS,\n      NAME: exportName,\n      VALUE: acc\n    };\n\n    if (stringSpecifiers.has(exportName)) {\n      return InitTemplate.computed(params);\n    } else {\n      return InitTemplate.default(params);\n    }\n  }, initExpr));\n}\n\nfunction chunk(array, size) {\n  var chunks = [];\n\n  for (var i = 0; i < array.length; i += size) {\n    chunks.push(array.slice(i, i + size));\n  }\n\n  return chunks;\n}","map":null,"metadata":{},"sourceType":"script"}